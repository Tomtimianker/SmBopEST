eval_err_num:1
hard pred: SELECT * FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN flights ON flights.destairport = airports.airportcode WHERE airports.city = Aberdeen OR airports.city = Ashley
hard gold: SELECT * FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  "Ashley" AND T3.City  =  "Aberdeen"

eval_err_num:2
hard pred: SELECT COUNT( * ) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN flights ON flights.destairport = airports.airportcode WHERE airports.city = Aberdeen OR airports.city = Ashley
hard gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  "Ashley" AND T3.City  =  "Aberdeen"

easy pred: SELECT * FROM flights JOIN airlines ON flights.airline = airlines.uid  WHERE airlines.airline = "United Airlines"
easy gold: SELECT * FROM AIRLINES WHERE Airline  =  "United Airlines"

easy pred: SELECT COUNT( * ) FROM flights JOIN airlines ON flights.airline = airlines.uid  WHERE airlines.airline = "United Airlines"
easy gold: SELECT count(*) FROM AIRLINES WHERE Airline  =  "United Airlines"

eval_err_num:3
medium pred: SELECT COUNT( * ) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN flights ON flights.sourceairport = airports.airportcode JOIN ASY Airport ON airports.airportname = ASY Airport  WHERE airlines.airline = "United Airlines"
medium gold: SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.DestAirport  =  "ASY"

easy pred: SELECT * FROM flights JOIN airlines ON flights.airline = airlines.uid  WHERE airlines.airline = "United Airlines"
easy gold: SELECT * FROM AIRLINES WHERE Airline  =  "United Airlines"

medium pred: SELECT * FROM flights JOIN airlines ON flights.airline = airlines.uid  WHERE airlines.airline = "United Airlines"
medium gold: SELECT * FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.SourceAirport  =  "AHD"

eval_err_num:4
medium pred: SELECT COUNT( * ) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN airlines ON flights.airline = airlines.uid JOIN United Airlines ON airlines.airline = United Airlines  WHERE airlines.airline = "AHD"
medium gold: SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.SourceAirport  =  "AHD"

eval_err_num:5
hard pred: SELECT * FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN airlines ON flights.destairport = airlines.uid JOIN Aberdeen ON airports.city = Aberdeen  WHERE airlines.airline = "United Airlines"
hard gold: SELECT * FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  "Aberdeen" AND T3.Airline  =  "United Airlines"

eval_err_num:6
hard pred: SELECT COUNT( * ) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN airlines ON flights.airline = airlines.uid JOIN Aberdeen ON airports.city = Aberdeen  WHERE airlines.airline = "United Airlines"
hard gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  "Aberdeen" AND T3.Airline  =  "United Airlines"

hard pred: SELECT airports.city FROM flights JOIN airports ON flights.destairport = airports.airportcode GROUP BY airports.city ORDER BY COUNT( * ) ASC
hard gold: SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC

hard pred: SELECT airports.city FROM flights JOIN airports ON flights.sourceairport = airports.airportcode GROUP BY airports.city ORDER BY COUNT( * ) ASC
hard gold: SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC

easy pred: SELECT airports.airportcode FROM airports UNION SELECT flights.sourceairport FROM flights
easy gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport

easy pred: SELECT airports.airportcode FROM airports UNION SELECT flights.sourceairport FROM flights
easy gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport

extra pred: SELECT * FROM flights JOIN airlines ON flights.airline = airlines.uid GROUP BY flights.airline ORDER BY COUNT( * ) DESC LIMIT 1
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1

hard pred: SELECT airlines.abbreviation , airlines.country FROM airlines JOIN flights ON airlines.uid = flights.airline GROUP BY airlines.abbreviation ORDER BY COUNT( * ) ASC
hard gold: SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*)

extra pred: SELECT airlines.country FROM airlines GROUP BY airlines.country ORDER BY COUNT( * ) ASC LIMIT 1
extra gold: SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1

eval_err_num:7
extra pred: SELECT airlines.airline FROM airlines JOIN flights ON airlines.uid = flights.airline JOIN APG ON flights.sourceairport = APG INTERSECT SELECT airlines.airline FROM airlines JOIN flights ON airlines.uid = flights.airline  WHERE flights.sourceairport = "CVO"
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO"

eval_err_num:8
extra pred: SELECT airlines.airline FROM airlines JOIN flights ON airlines.uid = flights.airline JOIN APG ON flights.sourceairport = APG EXCEPT SELECT airlines.airline FROM airlines JOIN flights ON airlines.uid = flights.airline  WHERE flights.sourceairport = "CVO"
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG"

easy pred: SELECT * FROM airlines
easy gold: SELECT DISTINCT Airline FROM AIRLINES

easy pred: SELECT * FROM airlines
easy gold: SELECT DISTINCT Airline FROM AIRLINES

easy pred: SELECT flights.flightno FROM flights  WHERE flights.sourceairport = "departure"
easy gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode

easy pred: SELECT flights.flightno FROM flights  WHERE flights.sourceairport = "arrival"
easy gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode

eval_err_num:9
hard pred: SELECT * FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN flights ON flights.destairport = airports.airportcode WHERE airports.city = Aberdeen OR airports.city = Abilene
hard gold: SELECT * FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  "Aberdeen" OR T2.city  =  "Abilene"

eval_err_num:10
hard pred: SELECT COUNT( * ) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN flights ON flights.destairport = airports.airportcode WHERE airports.city = Aberdeen OR airports.city = Abilene
hard gold: SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  "Aberdeen" OR T2.city  =  "Abilene"

hard pred: SELECT flights.sourceairport , flights.destairport FROM flights
hard gold: SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights

hard pred: SELECT airports.airportname FROM airports EXCEPT SELECT airports.airportname FROM flights JOIN airports ON flights.destairport = airports.airportcode
hard gold: SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)

easy pred: SELECT * FROM student ORDER BY student.age ASC
easy gold: SELECT * FROM pets ORDER BY pet_age

easy pred: SELECT pets.weight FROM pets JOIN has_pet ON pets.petid = has_pet.petid ORDER BY student.age ASC
easy gold: SELECT weight FROM pets ORDER BY pet_age

medium pred: SELECT pets.weight FROM pets ORDER BY student.age DESC LIMIT 1
medium gold: SELECT weight FROM pets ORDER BY pet_age LIMIT 1

medium pred: SELECT * FROM has_pet JOIN pets ON has_pet.petid = pets.petid JOIN student ON has_pet.stuid = student.stuid WHERE student.age > 20
medium gold: SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20

eval_err_num:11
hard pred: SELECT COUNT( * ) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN f ON student.sex = f JOIN has_pet ON has_pet.petid = f
hard gold: SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'

eval_err_num:12
extra pred: SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid JOIN cat ON pets.pettype = cat INTERSECT SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON pets.petid = has_pet.petid  WHERE pets.pettype = "dog"
extra gold: SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'

eval_err_num:13
extra pred: SELECT * FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid JOIN dog ON pets.pettype = dog INTERSECT SELECT * FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = "cat"
extra gold: SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'

eval_err_num:14
extra pred: SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid JOIN dog ON pets.pettype = dog INTERSECT SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = "cat"
extra gold: SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'

hard pred: SELECT * FROM has_pet JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = "cat"
hard gold: SELECT * FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')

hard pred: SELECT student.major FROM has_pet JOIN pets ON has_pet.petid = pets.petid JOIN has_pet ON has_pet.petid = pets.petid JOIN student ON has_pet.stuid = student.stuid  WHERE pets.pettype = "cat"
hard gold: SELECT major FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')

extra pred: SELECT student.age , student.major FROM has_pet JOIN pets ON has_pet.petid = pets.petid JOIN student ON has_pet.stuid = student.stuid  WHERE pets.pettype = "cat"
extra gold: SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')

hard pred: SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = "cats"
hard gold: SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'

hard pred: SELECT student.stuid FROM student EXCEPT SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = "cats"
hard gold: SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'

hard pred: SELECT * FROM student WHERE student.stuid IN (SELECT has_pet.stuid FROM has_pet)
hard gold: SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'

eval_err_num:15
extra pred: SELECT * FROM student WHERE student.stuid NOT IN (SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid JOIN cat ON pets.pettype = cat)
extra gold: SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' EXCEPT SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'

eval_err_num:16
extra pred: SELECT student.fname , student.age FROM student WHERE student.stuid NOT IN (SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid JOIN cat ON pets.pettype = cat)
extra gold: SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' EXCEPT SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'

medium pred: SELECT * FROM has_pet JOIN pets ON has_pet.petid = pets.petid ORDER BY pets.pet_age ASC LIMIT 1
medium gold: SELECT * FROM pets ORDER BY pet_age LIMIT 1

easy pred: SELECT has_pet.petid FROM has_pet GROUP BY has_pet.petid
easy gold: SELECT petid FROM pets

easy pred: SELECT pets.petid FROM pets JOIN has_pet ON pets.petid = has_pet.petid GROUP BY pets.petid HAVING MAX( pets.pet_age ) > 1
easy gold: SELECT petid FROM pets WHERE pet_age  >  1

medium pred: SELECT pets.pettype , MAX( student.age ) FROM pets GROUP BY pets.pettype
medium gold: SELECT max(pet_age) ,  pettype FROM pets GROUP BY pettype

medium pred: SELECT pets.pettype , AVG( student.age ) FROM pets GROUP BY pets.pettype
medium gold: SELECT avg(pet_age) ,  pettype FROM pets GROUP BY pettype

easy pred: SELECT DISTINCT student.fname FROM student WHERE student.stuid IN (SELECT has_pet.stuid FROM has_pet)
easy gold: SELECT DISTINCT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid

easy pred: SELECT * FROM student WHERE student.stuid IN (SELECT has_pet.stuid FROM has_pet)
easy gold: SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid

medium pred: SELECT has_pet.petid FROM has_pet JOIN student ON has_pet.stuid = student.stuid  WHERE pets.pettype = "cat"
medium gold: SELECT petid FROM pets WHERE pet_age  =  3 AND pettype  =  'cat'

hard pred: SELECT DISTINCT student.fname , student.lname FROM has_pet JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = "cat"
hard gold: SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'

eval_err_num:17
hard pred: has_pet , pets
hard gold: SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'

hard pred: SELECT * FROM student WHERE student.stuid NOT IN (SELECT has_pet.stuid FROM has_pet)
hard gold: SELECT * FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid)

extra pred: SELECT AVG( student.age ) FROM student WHERE student.stuid NOT IN (SELECT has_pet.stuid FROM has_pet)
extra gold: SELECT avg(age) FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid)

easy pred: SELECT country.region FROM country GROUP BY country.region
easy gold: SELECT Region FROM country

eval_err_num:18
extra pred: SELECT countrylanguage.language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode JOIN Aruba ON country.name = Aruba GROUP BY countrylanguage.language ORDER BY COUNT( * ) DESC LIMIT 1
extra gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba" ORDER BY Percentage DESC LIMIT 1

easy pred: SELECT country.name FROM country  WHERE country.region = "Asia"
easy gold: SELECT Name FROM country WHERE Continent  =  "Asia"

eval_err_num:19
hard pred: SELECT country.name FROM country JOIN Asia ON country.region = Asia ORDER BY country.lifeexpectancy ASC LIMIT 1
hard gold: SELECT Name FROM country WHERE Continent  =  "Asia" ORDER BY LifeExpectancy LIMIT 1

easy pred: SELECT COUNT( * ) FROM country  WHERE country.region = "Asia"
easy gold: SELECT sum(Population) FROM country WHERE Continent  =  "Asia"

easy pred: SELECT * FROM country  WHERE country.region = "Africa"
easy gold: SELECT * FROM country WHERE Continent  =  "Africa"

eval_err_num:20
medium pred: SELECT country.name FROM country JOIN Africa ON country.region = Africa  WHERE country.governmentform = "republic"
medium gold: SELECT * FROM country WHERE Continent  =  "Africa" AND GovernmentForm  =  "Republic"

eval_err_num:21
medium pred: SELECT AVG( country.lifeexpectancy ) FROM country JOIN Africa ON country.region = Africa JOIN Africa? Which countries are also republic ON country.continent = Africa? Which countries are also republic JOIN country ON country.region = Africa
medium gold: SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  "Africa" AND GovernmentForm  =  "Republic"

eval_err_num:22
medium pred: SELECT country.name FROM country WHERE country.continent = Asia OR country.continent = Europe
medium gold: SELECT * FROM country WHERE Continent  =  "Asia" OR Continent  =  "Europe"

eval_err_num:23
medium pred: SELECT country.surfacearea FROM country WHERE country.region = Asia OR country.region = Europe
medium gold: SELECT SurfaceArea FROM country WHERE Continent  =  "Asia" OR Continent  =  "Europe"

eval_err_num:24
medium pred: SELECT SUM( country.surfacearea ) FROM country WHERE country.continent = Asia OR country.region = Europe
medium gold: SELECT sum(SurfaceArea) FROM country WHERE Continent  =  "Asia" OR Continent  =  "Europe"

easy pred: SELECT country.name FROM country  WHERE country.governmentform = "US territory"
easy gold: SELECT * FROM country WHERE GovernmentForm  =  "US Territory"

medium pred: SELECT COUNT( * ) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.name = "Aruba"
medium gold: SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba"

medium pred: SELECT COUNT( * ) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code  WHERE country.name = "Afghanistan"
medium gold: SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"

medium pred: SELECT COUNT( * ) FROM countrylanguage
medium gold: SELECT count(*) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name

extra pred: SELECT * FROM countrylanguage GROUP BY countrylanguage.language ORDER BY COUNT( * ) DESC LIMIT 1
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1

medium pred: SELECT * FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language = "English"
medium gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English"

eval_err_num:25
extra pred: SELECT country.name FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code JOIN English ON countrylanguage.language = English INTERSECT SELECT country.name FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code  WHERE countrylanguage.language = "Dutch"
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch"

easy pred: SELECT COUNT( * ) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code  WHERE countrylanguage.language = "Dutch"
easy gold: SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")

eval_err_num:26
extra pred: SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode JOIN English ON countrylanguage.language = English INTERSECT SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language = "French"
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French"

medium pred: SELECT countrylanguage.isofficial FROM countrylanguage
medium gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.IsOfficial  =  "T"

medium pred: SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.isofficial = "English"
medium gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T"

eval_err_num:27
extra pred: SELECT country.name FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code JOIN English ON countrylanguage.isofficial = English INTERSECT SELECT country.name FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code  WHERE countrylanguage.language = "French"
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"

medium pred: SELECT * FROM countrylanguage  WHERE countrylanguage.language = "Chinese"
medium gold: SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Chinese"

eval_err_num:28
hard pred: SELECT DISTINCT country.region FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = Dutch OR countrylanguage.language = English
hard gold: SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" OR T2.Language  =  "Dutch"

medium pred: SELECT countrylanguage.isofficial FROM countrylanguage
medium gold: SELECT T2.Language ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE IsOfficial  =  "T"

eval_err_num:29
extra pred: SELECT countrylanguage.isofficial FROM countrylanguage WHERE countrylanguage.language = English OR countrylanguage.language = Dutch
extra gold: SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND IsOfficial  =  "T" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch" AND IsOfficial  =  "T"

eval_err_num:30
extra pred: SELECT countrylanguage.language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code JOIN Asia ON country.continent = Asia GROUP BY countrylanguage.language ORDER BY COUNT( * ) DESC LIMIT 1
extra gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  "Asia" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1

eval_err_num:31
hard pred: SELECT countrylanguage.language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code JOIN republic ON country.governmentform = republic GROUP BY countrylanguage.language HAVING COUNT( * ) = 1
hard gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  "Republic" GROUP BY T2.Language HAVING COUNT(*)  =  1

medium pred: SELECT city.name FROM countrylanguage  WHERE countrylanguage.language = "English"
medium gold: SELECT T1.Name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English"

eval_err_num:32
extra pred: SELECT city.name FROM city JOIN countrylanguage ON city.id = countrylanguage.countrycode JOIN English ON countrylanguage.language = English ORDER BY city.population DESC LIMIT 1
extra gold: SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1

medium pred: SELECT country.name , country.population , country.lifeexpectancy FROM country  WHERE country.region = "Asia"
medium gold: SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  "Asia"

eval_err_num:33
hard pred: SELECT country.name , country.population , country.lifeexpectancy FROM country JOIN Asia ON country.region = Asia ORDER BY country.surfacearea DESC LIMIT 1
hard gold: SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  "Asia" ORDER BY SurfaceArea DESC LIMIT 1

medium pred: SELECT countrylanguage.isofficial FROM countrylanguage
medium gold: SELECT T2.Language ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.IsOfficial  =  "T"

eval_err_num:34
hard pred: SELECT countrylanguage.language FROM countrylanguage WHERE countrylanguage.language != English
hard gold: SELECT * FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")

eval_err_num:35
extra pred: SELECT AVG( country.lifeexpectancy ) FROM country WHERE country.code NOT IN (SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.isofficial != English)
extra gold: SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")

eval_err_num:36
hard pred: SELECT country.name FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE countrylanguage.language != English
hard gold: SELECT Name FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")

eval_err_num:37
extra pred: SELECT COUNT( * ) FROM country WHERE countrylanguage.countrycode NOT IN (SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language != English)
extra gold: SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")

medium pred: SELECT * FROM country  WHERE country.headofstate = "Beatrix"
medium gold: SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix"

medium pred: SELECT countrylanguage.language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.headofstate = "Beatrix"
medium gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" AND T2.IsOfficial  =  "T"

easy pred: SELECT country.name FROM country WHERE country.indepyear > 1930
easy gold: SELECT T1.Name FROM country AS t1 WHERE  IndepYear  <  1930

medium pred: SELECT COUNT( DISTINCT countrylanguage.language ) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.indepyear > 1930
medium gold: SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  "T"

easy pred: SELECT * FROM country  WHERE country.region = "European countries"
easy gold: SELECT * FROM country WHERE Continent  =  "Europe"

easy pred: SELECT MIN( country.surfacearea ) FROM country  WHERE country.region = "European"
easy gold: SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe"

eval_err_num:38
hard pred: SELECT country.name FROM country WHERE country.surfacearea > (SELECT MIN( country.surfacearea ) FROM country JOIN European ON country.region = European)
hard gold: SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe")

easy pred: SELECT MAX( country.population ) FROM country  WHERE country.region = "Asia"
easy gold: SELECT min(population) FROM country WHERE Continent  =  "Asia"

eval_err_num:39
extra pred: SELECT * FROM country WHERE country.population<(SELECT MIN( country.population ) FROM country JOIN Africa ON country.continent = Africa)
extra gold: SELECT Name FROM country WHERE Continent  =  "Africa"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  "Asia")

easy pred: SELECT MIN( country.population ) FROM country  WHERE country.region = "Africa"
easy gold: SELECT min(population) FROM country WHERE Continent  =  "Africa"

eval_err_num:40
extra pred: SELECT country.region FROM country WHERE country.population > (SELECT MIN( country.population ) FROM country JOIN Asian ON country.continent = Asian)
extra gold: SELECT Name FROM country WHERE Continent  =  "Asia"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  "Africa")

easy pred: SELECT country.code FROM country
easy gold: SELECT CountryCode FROM countrylanguage

eval_err_num:41
hard pred: SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language != English
hard gold: SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"

easy pred: SELECT country.code FROM country
easy gold: SELECT DISTINCT CountryCode FROM countrylanguage

eval_err_num:42
easy pred: NO PREDICTION
easy gold: SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE ! =  "English"

eval_err_num:43
easy pred: NO PREDICTION
easy gold: SELECT Code FROM country WHERE GovernmentForm ! =  "Republic"

eval_err_num:44
hard pred: NO PREDICTION
hard gold: SELECT Code FROM country WHERE GovernmentForm ! =  "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"

medium pred: SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language = "English"
medium gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'English'

eval_err_num:45
extra pred: SELECT country.name FROM country JOIN Europe ON country.region = Europe WHERE country.code NOT IN (SELECT countrylanguage.language FROM countrylanguage JOIN Europe ON countrylanguage.isofficial = Europe)
extra gold: SELECT Name FROM country WHERE Continent  =  'Europe' AND Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'English')

eval_err_num:46
extra pred: SELECT city.name FROM country WHERE country.code NOT IN (SELECT country.name FROM country JOIN Europe ON country.region = Europe WHERE countrylanguage.language != English)
extra gold: SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')

eval_err_num:47
medium pred: SELECT * FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code JOIN Chinese ON countrylanguage.language = Chinese  WHERE country.region = "Asia"
medium gold: SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'Chinese' AND T1.Continent  =  "Asia"

eval_err_num:48
medium pred: SELECT * FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode JOIN Asia ON country.region = Asia  WHERE country.continent = "Chinese"
medium gold: SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  "Asia"

eval_err_num:49
hard pred: SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode JOIN Chinese ON countrylanguage.language = Chinese JOIN country ON country.continent = Chinese
hard gold: SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  "Asia"

medium pred: SELECT country.name FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code GROUP BY country.code HAVING COUNT( * ) >= 3
medium gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2

medium pred: SELECT country.name , COUNT( * ) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code GROUP BY countrylanguage.countrycode HAVING COUNT( * ) >= 3
medium gold: SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2

medium pred: SELECT SUM( country.population ) , country.governmentform FROM country WHERE country.lifeexpectancy > 72
medium gold: SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72

medium pred: SELECT AVG( country.lifeexpectancy ) , SUM( country.population ) FROM country WHERE country.lifeexpectancy<72
medium gold: SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72

medium pred: SELECT country.name FROM country ORDER BY country.surfacearea DESC LIMIT 5
medium gold: SELECT * FROM country ORDER BY SurfaceArea DESC LIMIT 5

medium pred: SELECT country.name FROM country ORDER BY country.population ASC LIMIT 3
medium gold: SELECT Name FROM country ORDER BY Population DESC LIMIT 3

eval_err_num:50
medium pred: SELECT country.name FROM country JOIN Europe ON country.continent = Europe WHERE country.population = 80000
medium gold: SELECT Name FROM country WHERE continent  =  "Europe" AND Population  =  "80000"

easy pred: SELECT * FROM country  WHERE country.region = "North America"
easy gold: SELECT * FROM country WHERE Continent  =  "North America"

eval_err_num:51
medium pred: SELECT country.name FROM country JOIN North America ON country.region = North America WHERE country.surfacearea > 3000
medium gold: SELECT * FROM country WHERE Continent  =  "North America" AND SurfaceArea  >  3000

eval_err_num:52
hard pred: SELECT SUM( country.population ) , AVG( country.surfacearea ) FROM country JOIN North America ON country.region = North America HAVING AVG( country.surfacearea ) > 3000
hard gold: SELECT sum(Population) ,  avg(SurfaceArea) FROM country WHERE Continent  =  "North America" AND SurfaceArea  >  3000

eval_err_num:53
medium pred: SELECT cartoon.title FROM cartoon WHERE cartoon.directed_by = Ben Jones OR cartoon.directed_by = Brandon Vietti
medium gold: SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti"

easy pred: SELECT * FROM tv_channel  WHERE tv_channel.language = "Italian"
easy gold: SELECT * FROM TV_Channel WHERE Country = "Italy"

easy pred: SELECT * FROM tv_channel  WHERE tv_channel.language = "Polish"
easy gold: SELECT * FROM TV_Channel WHERE Country = "Poland"

hard pred: SELECT tv_channel.series_name FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id  WHERE cartoon.title = "The Eyes of Despero"
hard gold: SELECT series_name FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Title = "The Eyes of Despero!")

medium pred: SELECT DISTINCT tv_channel.series_name , tv_channel.content FROM tv_channel
medium gold: SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel

medium pred: SELECT cartoon.channel FROM cartoon  WHERE cartoon.title = "The Rise of the Blue Beetle"
medium gold: SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "The Rise of the Blue Beetle!"

easy pred: SELECT tv_channel.country FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel  WHERE tv_channel.series_name = "Sky Radio"
easy gold: SELECT Country FROM TV_Channel WHERE series_name = "Sky Radio"

medium pred: SELECT tv_series.channel FROM tv_series  WHERE tv_series.episode = "A Love of a Lifetime"
medium gold: SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime"

medium pred: SELECT cartoon.production_code , cartoon.channel FROM cartoon ORDER BY cartoon.original_air_date DESC LIMIT 1
medium gold: SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date LIMIT 1

medium pred: SELECT tv_channel.country FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id JOIN tv_series ON tv_channel.id = tv_series.channel  WHERE cartoon.written_by = "Todd Casey"
medium gold: SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by  =  'Todd Casey'

medium pred: SELECT tv_channel.country FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id JOIN tv_series ON tv_series.channel = tv_channel.id  WHERE cartoon.written_by = "Steven Melching"
medium gold: SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by  =  'Steven Melching'

eval_err_num:54
hard pred: SELECT tv_channel.country FROM tv_channel JOIN cartoon ON tv_channel.id = cartoon.channel JOIN Todd Casey ON cartoon.written_by = Todd Casey EXCEPT SELECT tv_channel.country FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel
hard gold: SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'

eval_err_num:55
extra pred: SELECT tv_channel.series_name , tv_channel.country FROM tv_channel JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.directed_by = Ben Jones OR cartoon.directed_by = Michael Chang
extra gold: SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'

easy pred: SELECT COUNT( * ) FROM tv_channel  WHERE tv_channel.language = "Italian"
easy gold: SELECT COUNT(*) FROM TV_Channel WHERE Country = "Italy"

easy pred: SELECT tv_channel.id FROM tv_channel GROUP BY tv_channel.id HAVING COUNT( * ) > 2
easy gold: SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2

easy pred: SELECT poker_player.money_rank FROM poker_player ORDER BY poker_player.money_rank DESC
easy gold: SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC

medium pred: SELECT poker_player.money_rank FROM poker_player ORDER BY poker_player.money_rank DESC LIMIT 1
medium gold: SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1

hard pred: SELECT people.name FROM people JOIN poker_player ON people.people_id = poker_player.people_id ORDER BY people.height DESC LIMIT 1
hard gold: SELECT * FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1

easy pred: SELECT people.nationality , COUNT( * ) FROM people GROUP BY people.nationality
easy gold: SELECT COUNT(*) FROM people GROUP BY Nationality

easy pred: SELECT people.nationality , COUNT( * ) FROM people GROUP BY people.nationality
easy gold: SELECT COUNT(*) FROM people GROUP BY Nationality

eval_err_num:56
easy pred: SELECT people.name FROM people WHERE people.nationality != Russia
easy gold: SELECT Name FROM people WHERE Nationality != "Russia"

hard pred: SELECT people.name FROM people WHERE people.people_id NOT IN (SELECT poker_player.people_id FROM poker_player)
hard gold: SELECT * FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)

medium pred: SELECT AVG( death.killed ) , MAX( death.killed ) , MIN( death.killed ) FROM death
medium gold: SELECT max(killed) ,  min(killed) FROM death

easy pred: SELECT * FROM death
easy gold: SELECT * FROM death as T1 JOIN ship as T2 ON T1.caused_by_ship_id  =  T2.id

eval_err_num:57
medium pred: SELECT * FROM death JOIN ship ON death.caused_by_ship_id = ship.id JOIN ship ON ship.tonnage = t
medium gold: SELECT * FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'

eval_err_num:58
medium pred: SELECT * , death.injured FROM death JOIN ship ON death.caused_by_ship_id = ship.id JOIN ship ON ship.tonnage = t
medium gold: SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'

easy pred: SELECT battle.id , battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle
easy gold: SELECT DISTINCT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle

hard pred: SELECT death.killed , death.injured FROM battle JOIN death ON battle.id = death.id
hard gold: SELECT T1.id ,  T1.name, sum(T3.killed), sum(T3.injured) FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id

hard pred: SELECT death.killed FROM battle JOIN death ON battle.id = death.killed GROUP BY death.killed HAVING COUNT( * ) >= 2
hard gold: SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10

medium pred: SELECT ship.id , ship.name , death.injured FROM death JOIN ship ON death.caused_by_ship_id = ship.id
medium gold: SELECT T2.id ,  T2.name, sum(T1.injured) FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id

hard pred: SELECT ship.id , ship.name FROM death JOIN ship ON death.caused_by_ship_id = ship.id ORDER BY death.injured DESC
hard gold: SELECT T2.id ,  T2.name, sum(T1.injured) FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY sum(T1.injured)

easy pred: SELECT * FROM battle  WHERE battle.bulgarian_commander = "Kaloyan"
easy gold: SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan'

easy pred: SELECT * FROM battle  WHERE battle.latin_commander = "Baldwin I"
easy gold: SELECT name FROM battle WHERE latin_commander  =  'Baldwin I'

eval_err_num:59
medium pred: SELECT battle.name FROM battle WHERE battle.bulgarian_commander = bulgarian commander 'Kaloyan OR battle.latin_commander = Baldwin I
medium gold: SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'

extra pred: SELECT battle.id , battle.name FROM battle EXCEPT SELECT battle.id , battle.name FROM ship JOIN battle ON ship.lost_in_battle = battle.id WHERE ship.tonnage = 225
extra gold: SELECT id, name FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );

eval_err_num:60
extra pred: SELECT battle.name , battle.date FROM battle JOIN ship ON battle.id = ship.lost_in_battle JOIN Lettice ON ship.name = Lettice INTERSECT SELECT battle.name , battle.date FROM battle JOIN ship ON battle.id = ship.lost_in_battle  WHERE ship.name = "HMS Atlanta"
extra gold: SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'

eval_err_num:61
extra pred: SELECT battle.id , battle.name FROM battle WHERE battle.id NOT IN (SELECT ship.lost_in_battle FROM ship JOIN English Channel ON ship.location = English Channel)
extra gold: SELECT T1.id, T1.name FROM battle EXCEPT SELECT T1.id, T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'

eval_err_num:62
extra pred: SELECT battle.name , battle.name , battle.result , battle.bulgarian_commander FROM battle WHERE battle.id NOT IN (SELECT ship.lost_in_battle FROM ship JOIN English Channel ON ship.location = English Channel)
extra gold: SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'

eval_err_num:63
medium pred: NO PREDICTION
medium gold: SELECT T1.ContId ,  T1.Continent , * FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent;

medium pred: SELECT car_makers.fullname , car_makers.maker , car_makers.id FROM car_makers
medium gold: Select FullName, ID From CAR_MAKERS;

medium pred: SELECT countries.countryname , car_makers.maker , car_makers.country FROM car_makers JOIN countries ON car_makers.country = countries.countryid
medium gold: Select Country, FullName, ID From CAR_MAKERS;

medium pred: SELECT COUNT( * ) , countries.countryname FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN countries ON car_makers.country = countries.countryid GROUP BY countries.countryname
medium gold: SELECT count(*), T1.Country, T1.FullName, T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;

medium pred: SELECT countries.countryname , car_makers.fullname , car_makers.id , COUNT( * ) FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id
medium gold: SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;

hard pred: SELECT MAX( cars_data.horsepower ) FROM cars_data
hard gold: SELECT T2.horsepower FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower DESC LIMIT 1;

hard pred: SELECT MIN( cars_data.horsepower ) FROM cars_data
hard gold: SELECT T2.horsepower FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;

extra pred: SELECT * FROM cars_data WHERE cars_data.weight > (SELECT AVG( cars_data.weight ) FROM cars_data)
extra gold: SELECT * FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  >  (SELECT avg(Weight) FROM CARS_DATA)

extra pred: SELECT * FROM cars_data WHERE cars_data.weight<(SELECT AVG( cars_data.weight ) FROM cars_data)
extra gold: SELECT * FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)

medium pred: SELECT car_names.model , model_list.modelid FROM cars_data JOIN model_list ON cars_data.id = model_list.model WHERE cars_data.year = 1970
medium gold: Select T1.id, T2.model from cars_data as T1 join car_names as T2 on T1.id = T2.MakeId where T1.year = '1970';

eval_err_num:64
extra pred: car_makers.id = car_makers.id
extra gold: SELECT T1.Maker, T4.horsepower, T4.mpg, T4.id, T2.model FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';

eval_err_num:65
extra pred: car_makers , car_names
extra gold: SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';

extra pred: SELECT car_names.make , car_names.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid ORDER BY cars_data.year ASC LIMIT 1
extra gold: SELECT T2.Make , T2.Model, T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);

extra pred: SELECT car_names.make , cars_data.year FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid ORDER BY cars_data.year ASC LIMIT 1
extra gold: SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);

medium pred: SELECT car_names.make , cars_data.year FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON cars_data.id = car_names.makeid
medium gold: SELECT T1.model, T2.Make, T3.Year FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id;

hard pred: SELECT DISTINCT car_makers.maker FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.year > 1980
hard gold: SELECT T1.model, T2.Make, T3.Year FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;

hard pred: SELECT DISTINCT car_names.model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.year > 1980
hard gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;

medium pred: SELECT car_makers.fullname , car_makers.maker , car_makers.country FROM car_makers
medium gold: Select T1.Maker, T2.CountryName from Car_Makers as T1 JOIN Countries as T2 on T1.Country = T2.CountryId;

eval_err_num:66
medium pred: SELECT countries.continent , car_makers.maker , countries.countryname FROM car_makers , countries , car_names , continents
medium gold: SELECT T1.Continent,  T3.Maker, T2.CountryName FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country;

hard pred: SELECT car_makers.fullname , countries.countryname , continents.continent , COUNT( * ) FROM car_makers JOIN countries ON car_makers.country = countries.countryid JOIN continents ON countries.continent = continents.contid GROUP BY continents.continent
hard gold: SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;

eval_err_num:67
medium pred: NO PREDICTION
medium gold: SELECT *, count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country;

extra pred: SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname ORDER BY COUNT( * ) DESC LIMIT 1
extra gold: SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;

medium pred: SELECT model_list.model , car_makers.fullname , model_list.model , car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.maker
medium gold: SELECT T1.Model ,  T2.FullName, T2.id  FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id;

medium pred: SELECT COUNT( * ) , car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.maker
medium gold: SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;

medium pred: SELECT car_names.makeid FROM car_names  WHERE car_names.make = "amc hornet sporabout"
medium gold: SELECT T1.ID FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';

medium pred: SELECT countries.countryname FROM car_makers JOIN countries ON car_makers.country = countries.countryid
medium gold: SELECT T1.Maker, T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId;

medium pred: SELECT * FROM car_makers JOIN countries ON car_makers.country = countries.countryid  WHERE countries.countryname = "France"
medium gold: SELECT T1.Maker FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';

easy pred: SELECT COUNT( DISTINCT model_list.model ) FROM model_list
easy gold: SELECT count(*) FROM MODEL_LIST;

hard pred: SELECT COUNT( model_list.model ) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id  WHERE car_makers.country = "Germany"
hard gold: SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'Germany';

hard pred: SELECT COUNT( model_list.model ) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id  WHERE car_makers.country = "Japan"
hard gold: SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'japan';

hard pred: SELECT COUNT( model_list.model ) FROM model_list JOIN countries ON model_list.maker = countries.countryid  WHERE countries.countryname = "USA"
hard gold: SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';

hard pred: SELECT MIN( cars_data.weight ) FROM cars_data WHERE cars_data.year = 1974 AND cars_data.cylinders = 8
hard gold: SELECT Weight FROM CARS_DATA WHERE Cylinders  =  8 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1;

medium pred: SELECT countries.countryname FROM countries WHERE countries.countryid IN (SELECT car_makers.country FROM car_makers)
medium gold: SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;

medium pred: SELECT countries.countryname , countries.countryid FROM countries WHERE countries.countryid IN (SELECT car_makers.country FROM car_makers)
medium gold: SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;

medium pred: SELECT * FROM car_makers JOIN countries ON car_makers.country = countries.countryid
medium gold: SELECT T3.Maker, T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country;

hard pred: SELECT countries.countryname , COUNT( * ) FROM car_makers JOIN countries ON car_makers.country = countries.countryid GROUP BY countries.countryname
hard gold: SELECT T1.CountryName, count(*) FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country GROUP BY T1.CountryName;

eval_err_num:68
extra pred: SELECT COUNT( * ) , countries.countryname FROM car_makers JOIN countries ON car_makers.country = countries.countryid JOIN Europe ON countries.continent = Europe GROUP BY countries.countryname
extra gold: SELECT T1.CountryName, count(*) FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName;

extra pred: SELECT countries.countryname FROM car_makers JOIN countries ON car_makers.country = countries.countryid GROUP BY countries.countryname HAVING COUNT( * ) >= 3
extra gold: SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;

extra pred: SELECT car_names.makeid , car_names.make FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid ORDER BY cars_data.horsepower DESC LIMIT 1
extra gold: SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;

medium pred: SELECT AVG( cars_data.edispl ) , car_makers.maker FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN car_makers ON car_makers.id = car_names.make GROUP BY car_makers.maker
medium gold: SELECT T1.Make, avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id group by T1.Make;

medium pred: SELECT AVG( cars_data.edispl ) , car_names.model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model GROUP BY car_names.model
medium gold: SELECT T1.Model, avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id group by T1.Model;

eval_err_num:69
medium pred: SELECT car_names.model , AVG( cars_data.edispl ) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN volvo ON model_list.model = volvo GROUP BY car_names.model
medium gold: SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';

easy pred: SELECT car_names.model FROM car_names GROUP BY car_names.model
easy gold: SELECT distinct Model from CAR_NAMES;

medium pred: SELECT COUNT( DISTINCT car_makers.maker ) , car_names.model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model GROUP BY car_names.model
medium gold: SELECT Model, count(*) FROM CAR_NAMES GROUP BY Model;

hard pred: SELECT model_list.model FROM model_list JOIN car_names ON model_list.model = car_names.model GROUP BY car_names.model ORDER BY COUNT( * ) DESC LIMIT 1
hard gold: SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;

medium pred: SELECT car_makers.fullname , model_list.model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.makeid
medium gold: SELECT T1.FullName, T2.Model FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker;

medium pred: SELECT model_list.model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker  WHERE car_makers.fullname = "American Motor Company"
medium gold: SELECT T1.FullName, T2.Model FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';

easy pred: SELECT * FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id HAVING COUNT( * ) = 1
easy gold: SELECT * FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker;

medium pred: SELECT car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.maker HAVING COUNT( * ) > 1
medium gold: SELECT * FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  1;

medium pred: SELECT * FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.maker HAVING COUNT( * ) > 3
medium gold: SELECT * FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;

hard pred: SELECT COUNT( model_list.model ) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id  WHERE car_makers.fullname = "General Motors"
hard gold: SELECT count(DISTINCT T2.Model) FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id WHERE T3.FullName  =  'General Motors';

eval_err_num:70
hard pred: SELECT COUNT( DISTINCT model_list.model ) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN General Motors ON car_makers.fullname = General Motors WHERE cars_data.weight > 3500
hard gold: SELECT count(DISTINCT T2.Model) FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T1.MakeId  =  T3.Id WHERE T3.weight > 3500;

eval_err_num:71
extra pred: SELECT COUNT( * ) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON car_makers.id = car_names.model WHERE car_makers.fullname = General Motors OR cars_data.weight > 3500
extra gold: SELECT count(DISTINCT T2.Model) FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;

eval_err_num:72
extra pred: SELECT DISTINCT model_list.model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN cars_data ON car_names.makeid = cars_data.id WHERE car_makers.fullname = General Motors OR cars_data.weight > 3500
extra gold: SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;

medium pred: SELECT cars_data.year FROM cars_data WHERE cars_data.weight > 3000 INTERSECT SELECT cars_data.year FROM cars_data WHERE cars_data.weight<4000
medium gold: SELECT DISTINCT Year FROM CARS_DATA WHERE Weight  >  3000 AND Weight  <  4000;

medium pred: SELECT MIN( cars_data.accelerate ) FROM cars_data
medium gold: SELECT accelerate FROM CARS_DATA ORDER BY accelerate ASC LIMIT 1;

medium pred: SELECT MAX( cars_data.accelerate ) FROM cars_data
medium gold: SELECT accelerate FROM CARS_DATA ORDER BY accelerate DESC LIMIT 1;

medium pred: SELECT cars_data.horsepower FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid ORDER BY cars_data.accelerate DESC LIMIT 1
medium gold: SELECT horsepower FROM CARS_DATA ORDER BY accelerate DESC LIMIT 1;

medium pred: SELECT * FROM car_names  WHERE car_names.model = "volvo"
medium gold: SELECT * FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo';

eval_err_num:73
extra pred: SELECT * FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id JOIN volvo ON car_names.model = volvo ORDER BY cars_data.accelerate ASC LIMIT 1
extra gold: SELECT * FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;

eval_err_num:74
extra pred: SELECT cars_data.horsepower FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN volvo ON car_names.model = volvo ORDER BY cars_data.accelerate ASC LIMIT 1
extra gold: SELECT T1.horsepower FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;

eval_err_num:75
extra pred: SELECT cars_data.cylinders FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN volvo ON model_list.model = volvo ORDER BY cars_data.accelerate ASC LIMIT 1
extra gold: SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;

medium pred: SELECT MAX( cars_data.horsepower ) FROM cars_data
medium gold: SELECT horsepower FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1

hard pred: SELECT cars_data.id FROM cars_data WHERE cars_data.accelerate > (SELECT MAX( cars_data.accelerate ) FROM cars_data)
hard gold: SELECT id FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );

hard pred: SELECT COUNT( DISTINCT cars_data.id ) FROM cars_data WHERE cars_data.accelerate > (SELECT MAX( cars_data.accelerate ) FROM cars_data)
hard gold: SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );

hard pred: SELECT countries.countryname FROM countries WHERE countries.countryid NOT IN (SELECT car_makers.country FROM car_makers)
hard gold: SELECT CountryName FROM COUNTRIES where CountryId not in (SELECT T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country);

easy pred: SELECT countries.countryname FROM countries WHERE countries.countryid NOT IN (SELECT car_makers.country FROM car_makers)
easy gold: SELECT distinct T1.CountryName FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country;

eval_err_num:76
easy pred: car_makers , car_makers
easy gold: SELECT COUNT(*) FROM ( SELECT T1.CountryId ,  COUNT(*) FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >  1 );

easy pred: SELECT countries.countryname FROM car_makers JOIN countries ON car_makers.country = countries.countryid GROUP BY car_makers.country HAVING COUNT( * ) > 2
easy gold: SELECT COUNT(*) FROM ( SELECT T1.CountryId ,  COUNT(*) FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >  2 );

medium pred: SELECT model_list.model , cars_data.horsepower FROM model_list JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id
medium gold: SELECT T1.Model, T2.horsepower FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id;

medium pred: SELECT car_names.model , cars_data.horsepower FROM cars_data WHERE cars_data.cylinders = 4
medium gold: SELECT T1.Model, T2.horsepower FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4;

extra pred: SELECT model_list.model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE cars_data.cylinders = 4 ORDER BY cars_data.horsepower ASC LIMIT 1
extra gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower ASC LIMIT 1;

extra pred: SELECT car_names.model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id ORDER BY cars_data.horsepower DESC LIMIT 1
extra gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;

extra pred: SELECT car_makers.id , car_makers.maker FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.horsepower > (SELECT AVG( cars_data.horsepower ) FROM cars_data)
extra gold: SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA);

extra pred: SELECT car_makers.id , car_names.make FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid GROUP BY cars_data.id HAVING SUM( cars_data.cylinders ) <= 5
extra gold: SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <= 5;

extra pred: SELECT cars_data.id , car_names.make FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.horsepower > (SELECT MIN( cars_data.horsepower ) FROM cars_data WHERE cars_data.cylinders <= 3)
extra gold: SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <= 3;

extra pred: SELECT MAX( cars_data.horsepower ) FROM cars_data WHERE cars_data.cylinders = 8 OR cars_data.year<1980
extra gold: SELECT accelerate FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <  1980 ORDER BY accelerate DESC LIMIT 1;

extra pred: SELECT MAX( cars_data.mpg ) FROM cars_data WHERE cars_data.cylinders = 8 AND cars_data.year<1980
extra gold: SELECT mpg FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <  1980 ORDER BY mpg DESC LIMIT 1;

medium pred: SELECT model_list.model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id  WHERE car_makers.maker = "Ford Motor Company"
medium gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id where T2.FullName = 'Ford Motor Company';

eval_err_num:77
medium pred: SELECT car_names.model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.maker != Ford Motor Company
medium gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id where T2.FullName != 'Ford Motor Company';

extra pred: SELECT DISTINCT car_names.make , cars_data.weight FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN model_list ON model_list.model = car_names.model  WHERE car_makers.maker = "Ford Motor Company"
extra gold: SELECT T1.model, T2.Make, T3.weight FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'

eval_err_num:78
extra pred: car_makers.fullname = Ford Motor Company
extra gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';

easy pred: SELECT countries.countryname FROM countries WHERE countries.countryid IN (SELECT car_makers.country FROM car_makers)
easy gold: SELECT distinct T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;

hard pred: SELECT countries.countryname FROM countries WHERE countries.countryid NOT IN (SELECT car_makers.country FROM car_makers)
hard gold: SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;

medium pred: SELECT car_makers.id , car_makers.fullname , car_names.model , car_names.make FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.maker = car_names.makeid
medium gold: SELECT T1.Id ,  T1.Maker, T2.Model FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker;

extra pred: SELECT car_makers.id , car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id HAVING COUNT( * ) > 3
extra gold: SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;

medium pred: SELECT matches.loser_age , matches.winner_age , AVG( matches.minutes ) FROM matches
medium gold: SELECT avg(loser_age) ,  avg(winner_age) FROM matches

easy pred: SELECT COUNT( DISTINCT matches.winner_id ) FROM matches WHERE matches.year = 2013
easy gold: SELECT count(DISTINCT winner_name) FROM matches WHERE year = 2013

eval_err_num:79
easy pred: SELECT COUNT( DISTINCT players.player_id ) FROM players, matches WHERE players.player_id = (SELECT matches.winner_id FROM matches WHERE matches.year = 2013 INTERSECT SELECT matches.winner_id FROM matches WHERE matches.year = 2016)
easy gold: SELECT count(*) FROM (SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016)

hard pred: SELECT matches.winner_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.year = 2013 INTERSECT SELECT matches.winner_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.year = 2016
hard gold: SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016

eval_err_num:80
medium pred: SELECT COUNT( * ) FROM matches WHERE matches.loser_hand = L OR matches.year = 2016
medium gold: SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016

eval_err_num:81
extra pred: SELECT players.first_name , players.country_code FROM players JOIN matches ON players.player_id = matches.winner_id JOIN WTA Championships ON matches.tourney_name = WTA Championships INTERSECT SELECT players.first_name , players.country_code FROM players JOIN matches ON players.player_id = matches.winner_id  WHERE matches.tourney_name = "Australian Open"
extra gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'

medium pred: SELECT players.player_id , players.last_name FROM players ORDER BY players.birth_date DESC LIMIT 1
medium gold: SELECT player_id ,  last_name FROM players ORDER BY birth_date LIMIT 1

medium pred: SELECT players.first_name , players.last_name , players.country_code FROM players ORDER BY players.birth_date DESC LIMIT 1
medium gold: SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1

eval_err_num:82
easy pred: SELECT COUNT( * ) FROM players WHERE players.hand = right OR players.hand = R
easy gold: SELECT count(*) FROM players WHERE hand = 'R'

eval_err_num:83
easy pred: SELECT COUNT( * ) FROM players WHERE players.hand = L OR players.hand = Left
easy gold: SELECT count(*) FROM players WHERE hand = 'L'

eval_err_num:84
medium pred: SELECT players.country_code , players.birth_date FROM players WHERE players.hand = right OR players.hand = L
medium gold: SELECT country_code ,  birth_date FROM players WHERE hand  =  'L'

eval_err_num:85
medium pred: SELECT players.first_name , players.last_name FROM players JOIN L ON players.hand = L ORDER BY players.birth_date ASC
medium gold: SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date

hard pred: SELECT players.first_name , players.last_name FROM players JOIN rankings ON players.player_id = rankings.player_id ORDER BY rankings.tours ASC LIMIT 1
hard gold: SELECT T2.tours FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours ASC LIMIT 1

hard pred: SELECT players.first_name , players.last_name FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name , players.last_name ORDER BY SUM( rankings.tours ) DESC LIMIT 1
hard gold: SELECT T2.tours FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1

eval_err_num:86
hard pred: NO PREDICTION
hard gold: SELECT surface FROM matches GROUP BY surface ORDER  BY count(*) DESC LIMIT 1

hard pred: SELECT matches.loser_name , rankings.ranking_points FROM matches JOIN rankings ON matches.winner_rank_points = rankings.player_id GROUP BY matches.winner_rank_points ORDER BY COUNT( * ) DESC LIMIT 1
hard gold: SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1

eval_err_num:87
hard pred: SELECT matches.loser_name FROM matches JOIN Australian Open ON matches.tourney_name = Australian Open ORDER BY matches.loser_rank_points DESC LIMIT 1
hard gold: SELECT loser_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY loser_rank_points DESC LIMIT 1

eval_err_num:88
hard pred: SELECT matches.winner_name FROM matches JOIN Australian Open ON matches.tourney_name = Australian Open ORDER BY matches.winner_rank_points DESC LIMIT 1
hard gold: SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1

medium pred: SELECT rankings.tours , players.first_name FROM players JOIN rankings ON players.player_id = rankings.player_id
medium gold: SELECT T2.tours, T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name

medium pred: SELECT AVG( rankings.ranking ) , players.first_name FROM rankings JOIN players ON rankings.player_id = players.player_id
medium gold: SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name

medium pred: SELECT players.first_name , players.last_name , rankings.tours FROM players JOIN rankings ON players.player_id = rankings.player_id
medium gold: SELECT tours FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name

medium pred: SELECT AVG( rankings.ranking_points ) , players.first_name FROM rankings JOIN players ON rankings.player_id = players.player_id
medium gold: SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name

medium pred: SELECT SUM( rankings.ranking_points ) , players.first_name FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY rankings.player_id
medium gold: SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name

easy pred: SELECT players.country_code , COUNT( * ) FROM players GROUP BY players.country_code
easy gold: SELECT count(*) FROM players GROUP BY country_code

hard pred: SELECT players.country_code , COUNT( * ) FROM players GROUP BY players.country_code ORDER BY COUNT( * ) DESC LIMIT 1
hard gold: SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1

medium pred: SELECT players.hand , COUNT( * ) FROM players JOIN matches ON players.player_id = matches.loser_id GROUP BY players.hand
medium gold: SELECT count(*), hand FROM players GROUP BY hand

medium pred: SELECT players.country_code , players.hand , COUNT( * ) FROM players GROUP BY players.country_code
medium gold: SELECT count(*), country_code FROM players GROUP BY country_code

medium pred: SELECT matches.loser_name FROM matches ORDER BY matches.loser_name DESC LIMIT 3
medium gold: SELECT DISTINCT loser_name FROM matches ORDER BY loser_age DESC LIMIT 3

medium pred: SELECT matches.loser_name FROM matches ORDER BY matches.winner_name DESC LIMIT 3
medium gold: SELECT DISTINCT winner_name FROM matches ORDER BY winner_age DESC LIMIT 3

medium pred: SELECT matches.loser_name , matches.winner_rank FROM matches ORDER BY matches.winner_rank DESC LIMIT 3
medium gold: SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3

easy pred: SELECT COUNT( * ) FROM matches  WHERE matches.tourney_name = "Australian Open"
easy gold: SELECT count(DISTINCT loser_name) FROM matches WHERE tourney_name  =  'Australian Open'

easy pred: SELECT COUNT( * ) FROM matches  WHERE matches.tourney_name = "Australian Open"
easy gold: SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'Australian Open'

eval_err_num:89
medium pred: SELECT COUNT( DISTINCT matches.loser_name ) FROM players JOIN matches ON players.player_id = matches.winner_id JOIN WTA Championships ON players.hand = WTA Championships JOIN matches ON matches.tourney_name = WTA Championships
medium gold: SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'

eval_err_num:90
easy pred: SELECT conductor.name FROM conductor WHERE conductor.nationality != USA
easy gold: SELECT Name FROM conductor WHERE Nationality != 'USA'

easy pred: SELECT * FROM orchestra
easy gold: SELECT Record_Company FROM orchestra

medium pred: SELECT orchestra.year_of_founded FROM orchestra
medium gold: SELECT Record_Company, Year_of_Founded FROM orchestra

eval_err_num:91
easy pred: SELECT performance.share FROM performance WHERE performance.type != Live final
easy gold: SELECT SHARE FROM performance WHERE TYPE != "Live final"

eval_err_num:92
medium pred: SELECT MAX( performance.share ) , MIN( performance.share ) FROM performance WHERE performance.type != Live final
medium gold: SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != "Live final"

easy pred: SELECT DISTINCT orchestra.record_company FROM orchestra
easy gold: SELECT Record_Company FROM orchestra GROUP BY Record_Company

easy pred: SELECT * FROM orchestra GROUP BY orchestra.record_company
easy gold: SELECT Record_Company FROM orchestra

easy pred: SELECT orchestra.record_company FROM orchestra WHERE orchestra.year_of_founded<2003 GROUP BY orchestra.record_company
easy gold: SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003

easy pred: SELECT orchestra.record_company FROM orchestra WHERE orchestra.year_of_founded > 2003 INTERSECT SELECT orchestra.record_company FROM orchestra WHERE orchestra.year_of_founded<2003
easy gold: SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003

eval_err_num:93
medium pred: SELECT orchestra.orchestra FROM orchestra WHERE orchestra.major_record_format = CD OR orchestra.major_record_format = DVD
medium gold: SELECT * FROM orchestra WHERE Major_Record_Format  =  "CD" OR Major_Record_Format  =  "DVD"

eval_err_num:94
medium pred: SELECT COUNT( * ) FROM orchestra WHERE orchestra.major_record_format = CD OR orchestra.major_record_format = DVD
medium gold: SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  "CD" OR Major_Record_Format  =  "DVD"

eval_err_num:95
medium pred: SELECT documents.document_name FROM documents WHERE documents.document_description<w
medium gold: SELECT document_name FROM Documents WHERE Document_Description LIKE "%w%"

medium pred: SELECT documents.document_name , documents.template_id FROM documents JOIN templates ON documents.template_id = templates.template_id INTERSECT SELECT documents.document_name , documents.template_id FROM documents JOIN templates ON documents.template_id = templates.template_id
medium gold: SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE "%w%"

hard pred: SELECT templates.template_id FROM templates WHERE templates.template_id NOT IN (SELECT documents.template_id FROM documents)
hard gold: SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents

eval_err_num:96
medium pred: SELECT templates.template_id FROM templates WHERE templates.template_type_code = PP OR templates.template_type_code = PPT
medium gold: SELECT template_id FROM Templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT"

easy pred: SELECT * FROM templates WHERE templates.version_number > 5
easy gold: SELECT version_number FROM Templates WHERE version_number  >  5

medium pred: SELECT templates.template_type_code , templates.template_type_code FROM templates WHERE templates.version_number > 5
medium gold: SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5

easy pred: SELECT ref_template_types.template_type_code FROM templates EXCEPT SELECT templates.template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id
easy gold: SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id

easy pred: SELECT templates.template_type_code FROM templates
easy gold: SELECT template_type_code FROM Ref_template_types

easy pred: SELECT templates.template_type_code FROM templates
easy gold: SELECT template_type_code FROM Ref_template_types

eval_err_num:97
easy pred: SELECT paragraphs.other_details FROM paragraphs WHERE paragraphs.other_details IN (SELECT paragraphs.other_details FROM paragraphs JOIN Korea ON paragraphs.paragraph_text = Korea)
easy gold: SELECT Other_Details FROM Paragraphs WHERE paragraph_text  =  'Korea'

medium pred: SELECT paragraphs.document_id , COUNT( * ) FROM paragraphs GROUP BY paragraphs.document_id
medium gold: SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id

medium pred: SELECT documents.document_id , paragraphs.paragraph_id , documents.document_name , COUNT( * ) FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id
medium gold: SELECT T1.document_id ,  T2.document_name , count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id

extra pred: SELECT documents.document_id , documents.document_name , MAX( paragraphs.paragraph_id ) , paragraphs.document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY paragraphs.document_id ORDER BY COUNT( * ) DESC LIMIT 1
extra gold: SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1

medium pred: SELECT singer.song_name , singer.song_release_year FROM singer ORDER BY singer.age DESC LIMIT 1
medium gold: SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1

medium pred: SELECT AVG( stadium.capacity ) , MAX( stadium.highest ) FROM stadium
medium gold: SELECT avg(capacity) ,  max(capacity) FROM stadium

medium pred: SELECT stadium.name , stadium.capacity FROM stadium ORDER BY stadium.highest DESC LIMIT 1
medium gold: SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1

medium pred: SELECT concert.concert_name , concert.theme , COUNT( * ) FROM concert GROUP BY concert.concert_id
medium gold: SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id

medium pred: SELECT singer.name , COUNT( * ) FROM singer_in_concert JOIN concert ON singer_in_concert.concert_id = concert.concert_id JOIN singer ON singer_in_concert.singer_id = singer.singer_id GROUP BY singer_in_concert.singer_id
medium gold: SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id

eval_err_num:98
medium pred: SELECT singer.name FROM singer WHERE singer.name IN (SELECT names for those having a song having 'Hey FROM singer_in_concert INTERSECT SELECT singer.name FROM singer_in_concert)
medium gold: SELECT name FROM singer WHERE song_name LIKE '%Hey%'

eval_err_num:99
medium pred: SELECT singer.name , singer.country FROM singer WHERE singer.song_name != Hey
medium gold: SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'

easy pred: SELECT singer.name , singer.net_worth_millions FROM singer ORDER BY singer.net_worth_millions DESC
easy gold: SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC

medium pred: SELECT COUNT( DISTINCT singer.citizenship ) FROM singer
medium gold: SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship

medium pred: SELECT singer.citizenship FROM singer GROUP BY singer.citizenship ORDER BY COUNT( * ) DESC LIMIT 1
medium gold: SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC

medium pred: SELECT singer.name , COUNT( * ) FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.singer_id
medium gold: SELECT T1.Name, COUNT(*) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name

easy pred: SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id WHERE evaluation.year_awarded = (SELECT MAX( evaluation.year_awarded ) FROM evaluation)
easy gold: SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID

easy pred: SELECT COUNT( DISTINCT employee.name ) , employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY employee.employee_id
easy gold: SELECT count(distinct Employee_ID) FROM evaluation

easy pred: SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id WHERE evaluation.year_awarded >= (SELECT evaluation.year_awarded FROM evaluation)
easy gold: SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID

easy pred: SELECT COUNT( * ) FROM hiring
easy gold: SELECT count(distinct Shop_ID) FROM hiring

medium pred: SELECT shop.name , COUNT( * ) FROM hiring JOIN shop ON hiring.shop_id = shop.shop_id GROUP BY hiring.shop_id
medium gold: SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name

easy pred: SELECT * FROM visit
easy gold: SELECT * FROM visitor

easy pred: SELECT * FROM visitor JOIN visit ON visitor.id = visit.visitor_id ORDER BY visitor.level_of_membership DESC
easy gold: SELECT * FROM visitor ORDER BY Level_of_membership DESC

easy pred: SELECT visitor.name FROM visitor JOIN visit ON visitor.id = visit.visitor_id ORDER BY visitor.level_of_membership DESC
easy gold: SELECT name FROM visitor ORDER BY Level_of_membership DESC

medium pred: SELECT visitor.name FROM visitor JOIN visit ON visitor.id = visit.visitor_id INTERSECT SELECT visitor.name FROM visitor WHERE visitor.level_of_membership >= 4
medium gold: SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC

easy pred: SELECT COUNT( * ) FROM visit JOIN visitor ON visit.visitor_id = visitor.id WHERE visitor.level_of_membership > 4
easy gold: SELECT count(*) FROM visitor WHERE Level_of_membership  >  4

medium pred: SELECT visitor.name , visitor.level_of_membership FROM visitor JOIN visit ON visitor.id = visit.visitor_id WHERE visitor.level_of_membership > 4
medium gold: SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4

medium pred: SELECT visitor.name , visitor.level_of_membership FROM visitor JOIN visit ON visitor.id = visit.visitor_id WHERE visitor.level_of_membership > 4 ORDER BY visitor.age DESC
medium gold: SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC

medium pred: SELECT visitor.name FROM visit JOIN visitor ON visit.visitor_id = visitor.id GROUP BY visitor.name HAVING COUNT( * ) > 1
medium gold: SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1

extra pred: SELECT visitor.name FROM visit JOIN visitor ON visit.visitor_id = visitor.id ORDER BY visit.total_spent DESC LIMIT 1
extra gold: SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1

extra pred: SELECT visitor.name , visitor.level_of_membership FROM visitor JOIN visit ON visitor.id = visit.visitor_id ORDER BY visit.total_spent DESC LIMIT 1
extra gold: SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1

medium pred: SELECT museum.museum_id , museum.name , SUM( visit.num_of_ticket ) FROM visit JOIN museum ON visit.museum_id = museum.museum_id GROUP BY museum.museum_id
medium gold: SELECT t2.Museum_ID ,  t1.name, count(*) FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID

medium pred: SELECT visit.visitor_id FROM visit GROUP BY visit.num_of_ticket ORDER BY SUM( visit.num_of_ticket ) DESC LIMIT 1
medium gold: SELECT visitor_id FROM visit ORDER BY num_of_ticket DESC LIMIT 1

medium pred: SELECT MIN( visit.num_of_ticket ) , AVG( visit.num_of_ticket ) , MAX( visit.total_spent ) FROM visit
medium gold: SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit

easy pred: SELECT visitor.level_of_membership FROM visitor ORDER BY visitor.level_of_membership ASC LIMIT 1
easy gold: SELECT min(Level_of_membership) FROM visitor

easy pred: SELECT COUNT( * ) FROM visitor JOIN visit ON visitor.id = visit.visitor_id WHERE visitor.level_of_membership = 1
easy gold: SELECT count(*) FROM visitor WHERE Level_of_membership  =  1

extra pred: SELECT visitor.name FROM visit JOIN museum ON visit.museum_id = museum.museum_id JOIN visitor ON visit.visitor_id = visitor.id WHERE museum.open_year<2009 OR museum.open_year > 2011 INTERSECT SELECT visitor.name FROM museum JOIN visit ON museum.museum_id = visit.museum_id JOIN visitor ON visit.visitor_id = visitor.id WHERE museum.open_year > 2011
extra gold: SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011

extra pred: SELECT COUNT( * ) FROM visitor WHERE museum.museum_id NOT IN (SELECT visit.museum_id FROM visit WHERE museum.open_year > 2010)
extra gold: SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)

medium pred: SELECT * , highschooler.name FROM highschooler JOIN friend ON highschooler.id = friend.student_id
medium gold: SELECT T2.name, T3.name FROM friend as T1 join highschooler as T2  on friend_id = T2.ID join highschooler as T3 on student_id = T3.ID

eval_err_num:100
easy pred: 5 > 5
easy gold: SELECT count(*) FROM (SELECT * FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  > 5)

easy pred: SELECT COUNT( * ) FROM highschooler JOIN friend ON highschooler.id = friend.student_id GROUP BY friend.student_id HAVING COUNT( * ) >= 3
easy gold: SELECT count(*) FROM (SELECT * FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >= 3)

medium pred: SELECT highschooler.name FROM highschooler JOIN friend ON highschooler.id = friend.student_id GROUP BY friend.student_id HAVING COUNT( * ) > 3
medium gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3

hard pred: SELECT COUNT( * ) FROM friend JOIN highschooler ON friend.student_id = highschooler.id  WHERE highschooler.name = "Kyle"
hard gold: SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"

hard pred: SELECT friend.friend_id FROM friend JOIN highschooler ON friend.student_id = highschooler.id  WHERE highschooler.name = "Kyle"
hard gold: SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"

hard pred: SELECT likes.liked_id FROM likes JOIN highschooler ON likes.student_id = highschooler.id  WHERE highschooler.name = "Kyle"
hard gold: SELECT T3.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.liked_id  =  T3.id WHERE T2.name  =  "Kyle"

hard pred: SELECT friend.friend_id FROM friend JOIN highschooler ON friend.friend_id = highschooler.id  WHERE highschooler.name = "Kyle"
hard gold: SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"

hard pred: SELECT COUNT( * ) FROM friend JOIN highschooler ON friend.student_id = highschooler.id  WHERE highschooler.name = "Kyle"
hard gold: SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"

easy pred: SELECT friend.student_id FROM friend GROUP BY friend.student_id HAVING COUNT( * ) >= 1
easy gold: SELECT student_id FROM Friend

hard pred: SELECT highschooler.id FROM highschooler WHERE highschooler.id NOT IN (SELECT friend.student_id FROM friend GROUP BY friend.student_id HAVING COUNT( * ) >= 1)
hard gold: SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend

easy pred: SELECT highschooler.name FROM highschooler  WHERE highschooler.grade = "shcool"
easy gold: SELECT name FROM highschooler

easy pred: SELECT highschooler.name FROM friend JOIN highschooler ON friend.student_id = highschooler.id GROUP BY friend.student_id HAVING COUNT( * ) >= 5
easy gold: SELECT count(*) FROM (SELECT * FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >= 5)

easy pred: SELECT highschooler.name FROM friend JOIN highschooler ON friend.student_id = highschooler.id GROUP BY friend.student_id HAVING COUNT( * ) >= 1
easy gold: SELECT distinct T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id

hard pred: SELECT highschooler.name FROM friend JOIN highschooler ON friend.student_id = highschooler.id GROUP BY friend.student_id HAVING COUNT( * ) >= 0
hard gold: SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id

eval_err_num:101
medium pred: friend , friend
medium gold: SELECT distinct T1.student_id, T2.liked_id FROM Friend as T1 JOIN Likes as T2 ON T1.student_id = T2.student_id

extra pred: SELECT highschooler.id FROM likes JOIN highschooler ON likes.student_id = highschooler.id WHERE highschooler.id IN (SELECT likes.liked_id FROM friend) AND highschooler.id IN (SELECT likes.student_id FROM friend)
extra gold: SELECT distinct T1.student_id, T2.liked_id FROM Friend as T1 JOIN Likes as T2 ON T1.student_id = T2.student_id where T1.student_id in (SELECT liked_id FROM Likes)

hard pred: SELECT highschooler.id FROM highschooler WHERE highschooler.id IN (SELECT likes.student_id FROM likes)
hard gold: SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes

easy pred: SELECT COUNT( * ) FROM highschooler WHERE highschooler.id IN (SELECT likes.student_id FROM likes)
easy gold: SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id

easy pred: SELECT highschooler.name FROM highschooler WHERE highschooler.id IN (SELECT likes.student_id FROM likes)
easy gold: SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id

easy pred: SELECT COUNT( * ) FROM highschooler WHERE highschooler.id IN (SELECT friend.student_id FROM likes)
easy gold: SELECT count (*) FROM (SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id)

hard pred: SELECT highschooler.name FROM highschooler WHERE highschooler.id IN (SELECT friend.student_id FROM likes)
hard gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id

easy pred: SELECT COUNT( * ) FROM highschooler JOIN likes ON highschooler.id = likes.liked_id
easy gold: SELECT count(distinct student_id) FROM likes

medium pred: SELECT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY likes.student_id
medium gold: SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  1

medium pred: SELECT highschooler.name FROM highschooler JOIN friend ON highschooler.id = friend.student_id
medium gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id

hard pred: SELECT DISTINCT likes.liked_id FROM highschooler JOIN likes ON highschooler.id = likes.student_id  WHERE highschooler.name = "Kyle"
hard gold: SELECT T3.name  FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id JOIN Highschooler as T3 on T3.ID = T1.student_id WHERE T2.name  =  "Kyle"

medium pred: SELECT COUNT( DISTINCT likes.liked_id ) FROM likes JOIN highschooler ON likes.student_id = highschooler.id  WHERE highschooler.name = "Kyle"
medium gold: SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"

extra pred: SELECT AVG( highschooler.grade ) FROM highschooler WHERE highschooler.id NOT IN (SELECT friend.student_id FROM friend)
extra gold: SELECT avg(grade) FROM Highschooler WHERE id not IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)

hard pred: SELECT AVG( highschooler.grade ) FROM highschooler WHERE highschooler.id IN (SELECT friend.student_id FROM friend)
hard gold: SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)

easy pred: SELECT teacher.age FROM teacher
easy gold: SELECT Hometown FROM teacher

eval_err_num:102
easy pred: SELECT * FROM teacher WHERE teacher.hometown != Little Lever Urban District
easy gold: SELECT * FROM teacher WHERE Hometown != "Little Lever Urban Distric"

eval_err_num:103
easy pred: SELECT teacher.name FROM teacher WHERE teacher.hometown != Little Lever Urban District
easy gold: SELECT Name FROM teacher WHERE Hometown != "Little Lever Urban Distric"

easy pred: SELECT teacher.hometown , COUNT( * ) FROM teacher GROUP BY teacher.hometown
easy gold: SELECT COUNT(*) FROM teacher GROUP BY Hometown

easy pred: SELECT teacher.hometown , COUNT( * ) FROM teacher GROUP BY teacher.hometown
easy gold: SELECT COUNT(*) FROM teacher GROUP BY Hometown

medium pred: SELECT teacher.name FROM course JOIN course_arrange ON course.course_id = course_arrange.course_id JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id
medium gold: SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID

hard pred: SELECT teacher.name FROM course JOIN course_arrange ON course.course_id = course_arrange.course_id JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id ORDER BY teacher.name ASC
hard gold: SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name

medium pred: SELECT teacher.name , COUNT( * ) FROM course JOIN course_arrange ON course.course_id = course_arrange.course_id JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id GROUP BY teacher.teacher_id
medium gold: SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name

medium pred: SELECT teacher.name , COUNT( * ) FROM course JOIN course_arrange ON course.course_id = course_arrange.course_id JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id GROUP BY teacher.teacher_id
medium gold: SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name

medium pred: SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.teacher_id HAVING COUNT( * ) >= 2
medium gold: SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2

easy pred: SELECT ref_property_types.property_type_description FROM ref_property_types
easy gold: SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code

medium pred: SELECT ref_property_types.property_type_description , properties.property_type_code FROM ref_property_types JOIN properties ON ref_property_types.property_type_code = properties.property_type_code GROUP BY properties.property_type_code
medium gold: SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code

easy pred: SELECT area_code_state.area_code , area_code_state.state FROM area_code_state
easy gold: SELECT * FROM area_code_state

easy pred: SELECT * FROM votes
easy gold: SELECT state FROM votes

medium pred: SELECT * , votes.vote_id FROM votes
medium gold: SELECT vote_id,  state FROM votes

medium pred: SELECT votes.phone_number , votes.vote_id FROM votes
medium gold: SELECT vote_id ,  phone_number ,  state FROM votes

eval_err_num:104
easy pred: SELECT votes.created FROM votes JOIN CA ON votes.state = CA ORDER BY votes.created DESC LIMIT 1
easy gold: SELECT max(created) FROM votes WHERE state  =  'CA'

eval_err_num:105
easy pred: SELECT contestants.contestant_name FROM contestants WHERE contestants.contestant_name != Jessie Alloway
easy gold: SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'

extra pred: SELECT contestants.contestant_name FROM contestants JOIN votes ON contestants.contestant_number = votes.contestant_number GROUP BY votes.contestant_number ORDER BY COUNT( * ) ASC LIMIT 1
extra gold: SELECT * FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1

eval_err_num:106
medium pred: SELECT * FROM votes WHERE votes.state = NY OR votes.state = CA
medium gold: SELECT * FROM votes WHERE state  =  'NY' OR state  =  'CA'

eval_err_num:107
medium pred: SELECT COUNT( * ) FROM votes WHERE votes.state = NY OR votes.state = CA
medium gold: SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'

easy pred: SELECT area_code_state.area_code , area_code_state.state FROM area_code_state
easy gold: SELECT * FROM area_code_state

easy pred: SELECT * FROM votes JOIN area_code_state ON votes.state = area_code_state.state
easy gold: SELECT * FROM votes

medium pred: SELECT area_code_state.area_code , COUNT( * ) FROM area_code_state JOIN votes ON area_code_state.state = votes.state GROUP BY area_code_state.area_code
medium gold: SELECT count(*) FROM AREA_CODE_STATE AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code

extra pred: SELECT area_code_state.area_code FROM area_code_state JOIN votes ON area_code_state.state = votes.state GROUP BY votes.state ORDER BY COUNT( * ) DESC LIMIT 1
extra gold: SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1

easy pred: SELECT area_code_state.area_code FROM area_code_state
easy gold: SELECT * FROM area_code_state

eval_err_num:108
extra pred: SELECT area_code_state.area_code FROM area_code_state JOIN votes ON area_code_state.state = votes.state JOIN contestants ON votes.contestant_number = contestants.contestant_number JOIN Tabatha Gehling ON contestants.contestant_name = Tabatha Gehling INTERSECT SELECT area_code_state.area_code FROM area_code_state JOIN votes ON area_code_state.state = votes.state JOIN contestants ON votes.contestant_number = contestants.contestant_number  WHERE contestants.contestant_name = "Kelly Clauss"
extra gold: SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'

extra pred: SELECT departments.department_description FROM degree_programs JOIN departments ON degree_programs.department_id = departments.department_id GROUP BY departments.department_id ORDER BY COUNT( * ) DESC LIMIT 1
extra gold: SELECT T2.department_description ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1

medium pred: SELECT courses.course_name FROM courses JOIN sections ON courses.course_id = sections.course_id HAVING COUNT( * ) = 2 INTERSECT SELECT courses.course_name FROM courses JOIN sections ON courses.course_id = sections.course_id HAVING COUNT( * ) = 2
medium gold: SELECT * FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  =  2

eval_err_num:109
medium pred: SELECT departments.department_name FROM departments WHERE departments.department_name<computer
medium gold: SELECT * FROM Departments WHERE department_name LIKE '%computer%'

eval_err_num:110
medium pred: SELECT departments.department_description FROM addresses, departments, departments, departments WHERE departments.department_description = (SELECT transcripts.transcript_id FROM addresses)
medium gold: SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'

medium pred: SELECT COUNT( * ) FROM student_enrolment WHERE student_enrolment.semester_id = 2 AND student_enrolment.semester_id = 2
medium gold: SELECT count(*) FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2

eval_err_num:111
medium pred: semesters , student_enrolment
medium gold: SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2

hard pred: SELECT COUNT( * ) FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id  WHERE degree_programs.degree_summary_name = "Bachelor"
hard gold: SELECT DISTINCT count(*) FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'

hard pred: SELECT students.first_name , students.middle_name , students.middle_name , students.last_name FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id JOIN students ON student_enrolment.student_id = students.student_id  WHERE degree_programs.degree_summary_name = "Bachelor"
hard gold: SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'

extra pred: SELECT courses.course_description FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY student_enrolment.degree_program_id ORDER BY COUNT( * ) DESC LIMIT 3
extra gold: SELECT T1.degree_summary_description FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 3

extra pred: SELECT courses.course_name FROM courses JOIN student_enrolment ON courses.course_id = student_enrolment.degree_program_id GROUP BY student_enrolment.degree_program_id ORDER BY COUNT( * ) DESC LIMIT 1
extra gold: SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1

extra pred: SELECT degree_programs.degree_program_id , degree_programs.degree_summary_description , degree_programs.degree_summary_description , degree_programs.degree_summary_name FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_programs.degree_program_id ORDER BY COUNT( * ) DESC LIMIT 1
extra gold: SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1

extra pred: SELECT student_enrolment.student_id , students.first_name , students.last_name FROM student_enrolment JOIN students ON student_enrolment.student_id = students.student_id GROUP BY student_enrolment.student_id ORDER BY COUNT( * ) DESC LIMIT 3
extra gold: SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 3

extra pred: SELECT student_enrolment.student_id , students.first_name , students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY student_enrolment.student_id ORDER BY COUNT( * ) DESC LIMIT 1
extra gold: SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1

extra pred: SELECT courses.course_name , COUNT( * ) FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id GROUP BY student_enrolment_courses.course_id ORDER BY COUNT( * ) DESC LIMIT 1
extra gold: SELECT count(*) FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1

extra pred: SELECT courses.course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id GROUP BY student_enrolment_courses.course_id ORDER BY COUNT( * ) DESC LIMIT 1
extra gold: SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1

eval_err_num:112
extra pred: SELECT COUNT( * ) FROM students WHERE students.current_address_id NOT IN (SELECT student_enrolment.student_id FROM students JOIN addresses ON students.current_address_id = addresses.address_id JOIN North Carolina ON addresses.state_province_county = North Carolina)
extra gold: SELECT count(*) FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id

eval_err_num:113
extra pred: SELECT students.last_name FROM students WHERE students.last_name NOT IN (SELECT students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN addresses ON students.current_address_id = addresses.address_id JOIN North Carolina ON addresses.state_province_county = North Carolina)
extra gold: SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id

medium pred: SELECT transcripts.transcript_date , courses.course_id FROM courses JOIN sections ON courses.course_id = sections.course_id GROUP BY courses.course_id HAVING COUNT( * ) = 2
medium gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  = 2

eval_err_num:114
medium pred: SELECT 2 FROM transcripts GROUP BY 2 HAVING COUNT( * ) >= 2
medium gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2

eval_err_num:115
medium pred: SELECT addresses.line_1 , addresses.line_3 FROM addresses JOIN students ON addresses.address_id = students.current_address_id JOIN Timothy ON students.first_name = Timothy  WHERE students.last_name = "Ward"
medium gold: SELECT current_address_id FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'

eval_err_num:116
medium pred: SELECT students.cell_mobile_number FROM students JOIN Timothy ON students.first_name = Timothy  WHERE students.last_name = "Ward"
medium gold: SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'

medium pred: SELECT students.first_name , students.middle_name , students.middle_name , students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id ORDER BY students.date_first_registered DESC LIMIT 1
medium gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered DESC LIMIT 1

medium pred: SELECT students.date_first_registered , students.first_name , students.last_name , students.middle_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id ORDER BY students.date_first_registered DESC LIMIT 1
medium gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1

medium pred: SELECT students.first_name , students.middle_name , students.middle_name , students.last_name FROM students ORDER BY students.date_left DESC LIMIT 1
medium gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left DESC LIMIT 1

medium pred: SELECT students.first_name , MAX( students.other_student_details ) , students.middle_name FROM students ORDER BY students.last_name DESC LIMIT 1
medium gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1

extra pred: SELECT addresses.line_1 , students.permanent_address_id , addresses.address_id FROM addresses JOIN students ON addresses.address_id = students.current_address_id GROUP BY addresses.address_id ORDER BY COUNT( * ) DESC LIMIT 1
extra gold: SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1

medium pred: SELECT * FROM transcripts ORDER BY transcripts.transcript_date ASC LIMIT 1
medium gold: SELECT other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1

medium pred: SELECT transcripts.transcript_date FROM transcripts ORDER BY transcripts.other_details ASC LIMIT 1
medium gold: SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1

medium pred: SELECT transcripts.transcript_date FROM transcripts ORDER BY transcripts.transcript_date ASC LIMIT 1
medium gold: SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1

hard pred: SELECT student_enrolment_courses.course_id FROM student_enrolment_courses JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id GROUP BY student_enrolment_courses.course_id
hard gold: SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) ASC LIMIT 1

hard pred: SELECT COUNT( DISTINCT student_enrolment_courses.course_id ) FROM student_enrolment_courses JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id GROUP BY student_enrolment_courses.course_id HAVING COUNT( * ) <= 1
hard gold: SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1

extra pred: SELECT transcripts.other_details FROM transcripts GROUP BY transcripts.other_details ORDER BY COUNT( * ) ASC LIMIT 1
extra gold: SELECT T2.other_details FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1

extra pred: SELECT transcripts.transcript_id , transcripts.other_details FROM courses JOIN sections ON courses.course_id = sections.course_id JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id GROUP BY transcripts.transcript_id ORDER BY COUNT( * ) ASC LIMIT 1
extra gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1

medium pred: SELECT semesters.semester_name FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id JOIN degree_programs ON degree_programs.degree_program_id = student_enrolment.degree_program_id  WHERE degree_programs.degree_summary_name = "Master"
medium gold: SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master'

medium pred: SELECT semesters.semester_name FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id  WHERE student_enrolment.other_details = "Bachelor"
medium gold: SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'

eval_err_num:117
extra pred: SELECT semesters.semester_name FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id JOIN Master ON * = Master INTERSECT SELECT semesters.semester_name FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id  WHERE * = "Bachelor"
extra gold: SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'

hard pred: SELECT MAX( dogs.age ) , MIN( dogs.age ) FROM treatments JOIN dogs ON treatments.dog_id = dogs.dog_id
hard gold: SELECT * FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )

hard pred: SELECT AVG( dogs.age ) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id
hard gold: SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )

easy pred: SELECT * FROM professionals  WHERE professionals.last_name = "Employees"
easy gold: SELECT * FROM Professionals WHERE role_code = 'Employee'

extra pred: SELECT professionals.professional_id , professionals.last_name , professionals.cell_number FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id HAVING COUNT( * ) > 2 INTERSECT SELECT professionals.professional_id , professionals.last_name , professionals.home_phone FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id HAVING COUNT( * ) > 2
extra gold: SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2

medium pred: SELECT SUM( charges.charge_amount ) FROM treatments JOIN dogs ON treatments.dog_id = dogs.dog_id
medium gold: SELECT name, sum(cost_of_treatment) FROM Treatments AS T1 JOIN dogs AS T2 ON T1.dog_id = T2.dog_id GROUP BY T1.dog_id

medium pred: SELECT dogs.name FROM dogs GROUP BY dogs.name HAVING SUM( charges.charge_amount ) > 500
medium gold: SELECT name FROM Treatments  AS T1 JOIN dogs AS T2 ON T1.dog_id = T2.dog_id GROUP BY T1.dog_id Having sum(cost_of_treatment) > 500

hard pred: SELECT dogs.name , SUM( charges.charge_amount ) FROM treatments JOIN dogs ON treatments.dog_id = dogs.dog_id GROUP BY dogs.name HAVING SUM( charges.charge_amount ) > 1000
hard gold: SELECT name FROM Dogs WHERE dog_id NOT IN( SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum(cost_of_treatment)  >  1000 )

hard pred: SELECT dogs.name FROM professionals INTERSECT SELECT dogs.name FROM owners
hard gold: SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners

easy pred: SELECT owners.first_name , professionals.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE professionals.first_name > professionals.last_name
easy gold: SELECT name FROM Dogs

eval_err_num:118
hard pred: NO PREDICTION
hard gold: SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs

medium pred: SELECT professionals.first_name , professionals.role_code , professionals.email_address , treatments.treatment_type_code FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id
medium gold: SELECT T1.professional_id ,  T1.role_code ,  T1.email_address, T2.treatment_type_code  FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id

extra pred: SELECT professionals.first_name , professionals.role_code , professionals.email_address FROM professionals EXCEPT SELECT professionals.first_name , professionals.role_code , professionals.email_address FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id
extra gold: SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id

medium pred: SELECT * FROM dogs GROUP BY dogs.owner_id HAVING COUNT( * ) = 2
medium gold: SELECT T1.owner_id ,  T2.first_name ,  T2.last_name, count(*) FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id Having count(*) = 2

extra pred: SELECT owners.first_name , owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id ORDER BY COUNT( * ) DESC LIMIT 1
extra gold: SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1

medium pred: SELECT professionals.professional_id , professionals.role_code , professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id GROUP BY professionals.professional_id , professionals.role_code , professionals.first_name HAVING COUNT( * ) >= 2
medium gold: SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2

medium pred: SELECT dogs.breed_code FROM dogs GROUP BY dogs.breed_code ORDER BY COUNT( * ) DESC LIMIT 2
medium gold: SELECT breed_code, count(*) FROM Dogs GROUP BY breed_code limit 2

medium pred: SELECT dogs.breed_code FROM dogs GROUP BY dogs.breed_code ORDER BY COUNT( * ) DESC LIMIT 1
medium gold: SELECT breed_code, count(*) FROM Dogs GROUP BY breed_code limit 1

extra pred: SELECT breeds.breed_name FROM breeds JOIN dogs ON breeds.breed_code = dogs.breed_code GROUP BY dogs.breed_code ORDER BY COUNT( * ) DESC LIMIT 1
extra gold: SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1

medium pred: SELECT SUM( charges.charge_amount ) FROM treatments JOIN dogs ON treatments.dog_id = dogs.dog_id
medium gold: SELECT name, sum(cost_of_treatment) FROM Treatments AS T1 JOIN dogs AS T2 ON T1.dog_id = T2.dog_id GROUP BY T1.dog_id

hard pred: SELECT owners.first_name , owners.last_name , charges.charge_amount FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id
hard gold: SELECT T1.owner_id, T3.cost_of_treatment  FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id

easy pred: SELECT treatment_types.treatment_type_code , treatment_types.treatment_type_description FROM treatment_types
easy gold: SELECT * FROM Treatment_Types

extra pred: SELECT treatments.treatment_type_code , treatment_types.treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code GROUP BY treatments.treatment_type_code ORDER BY SUM( treatments.cost_of_treatment ) DESC
extra gold: SELECT treatment_type_code, sum(cost_of_treatment) FROM Treatments group by treatment_type_code order by sum(cost_of_treatment) desc

extra pred: SELECT treatments.treatment_type_code , treatment_types.treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code GROUP BY treatments.treatment_type_code ORDER BY SUM( treatments.cost_of_treatment ) DESC
extra gold: SELECT T2.treatment_type_code, T1.treatment_type_description,  sum(cost_of_treatment) FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1

extra pred: SELECT treatments.treatment_type_code , treatment_types.treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code GROUP BY treatments.treatment_type_code ORDER BY SUM( treatments.cost_of_treatment ) ASC LIMIT 1
extra gold: SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1

medium pred: SELECT SUM( charges.charge_amount ) FROM treatments JOIN dogs ON treatments.dog_id = dogs.dog_id
medium gold: SELECT name, sum(cost_of_treatment) FROM Treatments AS T1 JOIN DOGS AS T2 ON T1.dog_id = T2.dog_id GROUP BY T1.dog_id

medium pred: SELECT COUNT( * ) FROM charges JOIN dogs ON charges.charge_id = dogs.dog_id WHERE charges.charge_amount > 700
medium gold: SELECT count(name) FROM Treatments AS T1 JOIN DOGS AS T2 ON T1.dog_id = T2.dog_id GROUP BY T1.dog_id Having sum(cost_of_treatment) > 700

eval_err_num:119
hard pred: charges , charges
hard gold: SELECT T1.owner_id ,T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id Having sum(T3.cost_of_treatment) > 400

extra pred: SELECT dogs.owner_id , owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id ORDER BY SUM( charges.charge_amount ) DESC HAVING SUM( charges.charge_amount ) > 400
extra gold: SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1

medium pred: SELECT professionals.first_name , treatments.treatment_type_code FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
medium gold: SELECT T1.first_name, T2.treatment_type_code FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id

medium pred: SELECT professionals.first_name , professionals.cell_number , COUNT( * ) FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id GROUP BY professionals.first_name , professionals.cell_number HAVING COUNT( * ) = 1
medium gold: SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  = 1

medium pred: SELECT professionals.first_name , professionals.cell_number , COUNT( * ) FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code GROUP BY treatments.professional_id HAVING COUNT( * ) >= 2
medium gold: SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2

eval_err_num:120
medium pred: charges , treatments
medium gold: SELECT min(cost_of_treatment), max(cost_of_treatment), avg(cost_of_treatment) FROM Treatments

extra pred: SELECT professionals.first_name , professionals.last_name FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id ORDER BY treatments.cost_of_treatment ASC
extra gold: SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  = ( SELECT min(cost_of_treatment) FROM Treatments )

extra pred: SELECT AVG( treatments.cost_of_treatment ) , MAX( treatments.cost_of_treatment ) FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id
extra gold: SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  = ( SELECT max(cost_of_treatment) FROM Treatments )

hard pred: SELECT dogs.breed_code FROM dogs GROUP BY dogs.breed_code ORDER BY COUNT( * ) DESC LIMIT 1
hard gold: SELECT breed_code, count(*) FROM Dogs GROUP BY breed_code Order BY count(*) DESC LIMIT 1

hard pred: SELECT dogs.breed_code FROM dogs GROUP BY dogs.breed_code ORDER BY COUNT( * ) ASC LIMIT 1
hard gold: SELECT breed_code, count(*) FROM Dogs GROUP BY breed_code Order BY count(*) ASC LIMIT 1

extra pred: SELECT treatments.date_of_treatment , dogs.breed_code FROM breeds JOIN dogs ON breeds.breed_code = dogs.breed_code JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY dogs.breed_code ORDER BY COUNT( * ) ASC LIMIT 1
extra gold: SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )

medium pred: SELECT * FROM dogs ORDER BY dogs.age DESC LIMIT 1
medium gold: SELECT * FROM Dogs order by age asc limit 1

extra pred: SELECT owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id ORDER BY dogs.age DESC LIMIT 1
extra gold: SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )

extra pred: SELECT owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id ORDER BY dogs.age ASC LIMIT 1
extra gold: SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT min(age) FROM Dogs )

eval_err_num:121
medium pred: SELECT professionals.email_address FROM professionals WHERE professionals.state = Hawaii OR professionals.state = Wisconsin
medium gold: SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'

medium pred: SELECT professionals.role_code , COUNT( * ) , professionals.street , professionals.city , professionals.state FROM professionals GROUP BY professionals.state
medium gold: SELECT role_code ,  street ,  city ,  state FROM professionals WHERE state = 'Wisconsin'

medium pred: SELECT professionals.city , professionals.street , professionals.state FROM professionals WHERE professionals.role_code > professionals.street OR professionals.city = West
medium gold: SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'

eval_err_num:122
medium pred: SELECT owners.first_name , owners.last_name , owners.email_address FROM owners JOIN North ON owners.last_name = North WHERE owners.first_name >= owners.last_name GROUP BY owners.email_address
medium gold: SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'

easy pred: SELECT * FROM dogs ORDER BY dogs.age DESC
easy gold: SELECT age FROM Dogs ORDER BY age

easy pred: SELECT COUNT( * ) FROM dogs WHERE dogs.age <= 4
easy gold: SELECT count(*) FROM Dogs WHERE age  < 4

hard pred: SELECT COUNT( * ) FROM dogs WHERE dogs.age<(SELECT AVG( dogs.age ) FROM dogs WHERE dogs.age<4)
hard gold: SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )

medium pred: SELECT treatments.cost_of_treatment FROM treatments ORDER BY treatments.cost_of_treatment DESC LIMIT 1
medium gold: SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1

easy pred: SELECT * FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id
easy gold: SELECT count(*) FROM Dogs

hard pred: SELECT COUNT( * ) FROM treatments JOIN dogs ON treatments.dog_id = dogs.dog_id JOIN dogs ON dogs.owner_id = dogs.dog_id
hard gold: SELECT count(*) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )

extra pred: SELECT COUNT( * ) FROM owners WHERE owners.owner_id NOT IN (SELECT treatments.dog_id FROM treatments)
extra gold: SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )

eval_err_num:123
extra pred: SELECT COUNT( * ) FROM owners WHERE owners.owner_id NOT IN (SELECT dogs.owner_id FROM owners JOIN Arizona ON owners.state = Arizona)
extra gold: SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )

                     easy                 medium               hard                 extra                all                  joint_all           
count                481                  441                  145                  133                  1200                 421                 
=====================   EXECUTION ACCURACY     =====================
execution            0.000                0.000                0.000                0.000                0.000                0.000               

====================== EXACT MATCHING ACCURACY =====================
exact match          0.771                0.574                0.372                0.286                0.597                0.385               

---------------------PARTIAL MATCHING ACCURACY----------------------
select               0.923                0.796                0.714                0.670                0.831                0.000               
select(no AGG)       0.929                0.809                0.739                0.681                0.842                0.000               
where                0.811                0.867                0.690                0.600                0.798                0.000               
where(no OP)         0.824                0.867                0.793                0.720                0.828                0.000               
group(no Having)     0.576                0.790                0.765                0.797                0.757                0.000               
group                0.576                0.770                0.765                0.763                0.739                0.000               
order                0.750                0.677                0.897                0.846                0.788                0.000               
and/or               1.000                0.930                0.917                0.893                0.952                0.000               
IUEN                 0.000                0.000                0.600                0.500                0.381                0.000               
keywords             0.837                0.901                0.820                0.783                0.854                0.000               
---------------------- PARTIAL MATCHING RECALL ----------------------
select               0.894                0.719                0.586                0.474                0.746                0.000               
select(no AGG)       0.900                0.730                0.607                0.481                0.756                0.000               
where                0.816                0.684                0.506                0.200                0.619                0.000               
where(no OP)         0.830                0.684                0.582                0.240                0.642                0.000               
group(no Having)     0.905                0.664                0.703                0.770                0.718                0.000               
group                0.905                0.647                0.703                0.738                0.702                0.000               
order                0.789                0.638                0.714                0.821                0.730                0.000               
and/or               1.000                0.998                1.000                0.975                0.997                0.000               
IUEN                 0.000                0.000                0.300                0.083                0.182                0.000               
keywords             0.909                0.754                0.628                0.541                0.733                0.000               
---------------------- PARTIAL MATCHING F1 --------------------------
select               0.908                0.756                0.644                0.555                0.786                1.000               
select(no AGG)       0.914                0.768                0.667                0.564                0.797                1.000               
where                0.814                0.765                0.584                0.300                0.697                1.000               
where(no OP)         0.827                0.765                0.672                0.360                0.723                1.000               
group(no Having)     0.704                0.721                0.732                0.783                0.737                1.000               
group                0.704                0.703                0.732                0.750                0.720                1.000               
order                0.769                0.657                0.795                0.833                0.758                1.000               
and/or               1.000                0.962                0.957                0.932                0.974                1.000               
IUEN                 1.000                1.000                0.400                0.143                0.246                1.000               
keywords             0.872                0.821                0.711                0.640                0.789                1.000               


                     turn 1               turn 2               turn 3               turn 4               turn >4             
count                421                  421                  269                  88                   1                   
=====================   TRUN XECUTION ACCURACY     =====================
execution            0.000                0.000                0.000                0.000                0.000               

====================== TRUN EXACT MATCHING ACCURACY =====================
exact match          0.717                0.589                0.476                0.432                0.000               
