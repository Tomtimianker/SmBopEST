SELECT * FROM airlines	flight_2
SELECT * FROM airlines JOIN Jetblue Airways ON airlines.airline = Jetblue Airways	flight_2
SELECT airlines.country FROM airlines JOIN Jetblue Airways ON airlines.airline = Jetblue Airways	flight_2

SELECT DISTINCT airlines.abbreviation FROM airlines	flight_2
SELECT airlines.abbreviation FROM airlines JOIN Jetblue Airways ON airlines.airline = Jetblue Airways	flight_2

SELECT airlines.airline , airlines.abbreviation FROM airlines	flight_2
SELECT airlines.airline , airlines.abbreviation FROM airlines JOIN USA ON airlines.country = USA	flight_2

SELECT * FROM airports JOIN Anthony ON airports.city = Anthony	flight_2
SELECT airports.airportcode , airports.airportname FROM airports JOIN Anthony ON airports.city = Anthony	flight_2

SELECT * FROM airlines	flight_2
SELECT COUNT( * ) FROM airlines	flight_2

SELECT * FROM airports	flight_2
SELECT COUNT( * ) FROM airports	flight_2

SELECT * FROM flights	flight_2
SELECT COUNT( * ) FROM flights	flight_2

SELECT DISTINCT airlines.airline FROM airlines	flight_2
SELECT airlines.airline FROM airlines JOIN UAL ON airlines.abbreviation = UAL	flight_2

SELECT airlines.airline FROM airlines JOIN USA ON airlines.country = USA	flight_2
SELECT COUNT( * ) FROM airlines JOIN USA ON airlines.country = USA	flight_2

SELECT airports.city , airports.country FROM airports	flight_2
SELECT airports.city , airports.country FROM airports JOIN Alton ON airports.airportname = Alton	flight_2

SELECT airports.airportname FROM airports	flight_2
SELECT airports.airportname FROM airports JOIN AKO ON airports.airportcode = AKO	flight_2

SELECT airports.airportname FROM airports	flight_2
SELECT airports.airportname FROM airports JOIN Aberdeen ON airports.city = Aberdeen	flight_2

SELECT * FROM flights JOIN APG ON flights.sourceairport = APG	flight_2
SELECT COUNT( * ) FROM flights JOIN APG ON flights.sourceairport = APG	flight_2

SELECT * FROM flights JOIN ATO ON flights.sourceairport = ATO	flight_2
SELECT COUNT( * ) FROM flights JOIN ATO ON flights.sourceairport = ATO	flight_2

SELECT * FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN Aberdeen ON airports.city = Aberdeen	flight_2
SELECT COUNT( * ) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN Aberdeen ON airports.city = Aberdeen	flight_2

SELECT * FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN Aberdeen ON airports.city = Aberdeen	flight_2
SELECT COUNT( * ) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN Aberdeen ON airports.city = Aberdeen	flight_2

SELECT * FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN Aberdeen ON airports.city = Aberdeen	flight_2
SELECT * FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN flights ON flights.destairport = airports.airportcode WHERE airports.city = Aberdeen OR airports.city = Ashley	flight_2
SELECT COUNT( * ) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN flights ON flights.destairport = airports.airportcode WHERE airports.city = Aberdeen OR airports.city = Ashley	flight_2

SELECT * FROM flights JOIN airlines ON flights.airline = airlines.uid JOIN Jetblue Airways ON airlines.airline = Jetblue Airways	flight_2
SELECT COUNT( * ) FROM airlines JOIN flights ON airlines.uid = flights.airline JOIN Jetblue Airways ON airlines.airline = Jetblue Airways	flight_2

SELECT * FROM flights JOIN airlines ON flights.airline = airlines.uid JOIN United Airlines ON airlines.airline = United Airlines	flight_2
SELECT COUNT( * ) FROM flights JOIN airlines ON flights.airline = airlines.uid JOIN United Airlines ON airlines.airline = United Airlines	flight_2
SELECT COUNT( * ) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN flights ON flights.sourceairport = airports.airportcode JOIN ASY Airport ON airports.airportname = ASY Airport JOIN United Airlines ON airlines.airline = United Airlines	flight_2

SELECT * FROM flights JOIN airlines ON flights.airline = airlines.uid JOIN United Airlines ON airlines.airline = United Airlines	flight_2
SELECT * FROM flights JOIN airlines ON flights.airline = airlines.uid JOIN United Airlines ON airlines.airline = United Airlines	flight_2
SELECT COUNT( * ) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN airlines ON flights.airline = airlines.uid JOIN United Airlines ON airlines.airline = United Airlines JOIN AHD ON airlines.airline = AHD	flight_2

SELECT * FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN airlines ON flights.destairport = airlines.uid JOIN Aberdeen ON airports.city = Aberdeen JOIN United Airlines ON airlines.airline = United Airlines	flight_2
SELECT COUNT( * ) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN airlines ON flights.airline = airlines.uid JOIN Aberdeen ON airports.city = Aberdeen JOIN United Airlines ON airlines.airline = United Airlines	flight_2

SELECT airports.city FROM flights JOIN airports ON flights.destairport = airports.airportcode	flight_2
SELECT airports.city FROM flights JOIN airports ON flights.destairport = airports.airportcode GROUP BY airports.city ORDER BY COUNT( * ) ASC	flight_2
SELECT airports.city FROM flights JOIN airports ON flights.destairport = airports.airportcode GROUP BY airports.city ORDER BY COUNT( * ) DESC LIMIT 1	flight_2

SELECT airports.city FROM flights JOIN airports ON flights.sourceairport = airports.airportcode	flight_2
SELECT airports.city FROM flights JOIN airports ON flights.sourceairport = airports.airportcode GROUP BY airports.city ORDER BY COUNT( * ) ASC	flight_2
SELECT airports.city FROM flights JOIN airports ON flights.sourceairport = airports.airportcode GROUP BY airports.city ORDER BY COUNT( * ) DESC LIMIT 1	flight_2

SELECT DISTINCT flights.sourceairport FROM flights JOIN airports ON flights.sourceairport = airports.airportcode	flight_2
SELECT airports.airportcode FROM airports UNION SELECT flights.sourceairport FROM flights	flight_2
SELECT airports.airportcode FROM airports JOIN flights ON airports.airportcode = flights.sourceairport GROUP BY airports.airportcode ORDER BY COUNT( * ) DESC LIMIT 1	flight_2

SELECT DISTINCT flights.sourceairport FROM flights JOIN airports ON flights.sourceairport = airports.airportcode	flight_2
SELECT airports.airportcode FROM airports UNION SELECT flights.sourceairport FROM flights	flight_2
SELECT airports.airportcode FROM flights JOIN airports ON flights.sourceairport = airports.airportcode GROUP BY airports.airportcode ORDER BY COUNT( * ) ASC LIMIT 1	flight_2

SELECT COUNT( * ) , airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.uid GROUP BY airlines.airline	flight_2
SELECT * FROM flights JOIN airlines ON flights.airline = airlines.uid GROUP BY flights.airline ORDER BY COUNT( * ) DESC LIMIT 1	flight_2

SELECT airlines.abbreviation , airlines.country FROM airlines	flight_2
SELECT airlines.abbreviation , airlines.country FROM airlines JOIN flights ON airlines.uid = flights.airline GROUP BY airlines.abbreviation ORDER BY COUNT( * ) ASC	flight_2
SELECT airlines.country FROM airlines GROUP BY airlines.country ORDER BY COUNT( * ) ASC LIMIT 1	flight_2

SELECT * FROM flights JOIN AHD ON flights.sourceairport = AHD	flight_2
SELECT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.uid JOIN AHD ON flights.sourceairport = AHD	flight_2

SELECT * FROM flights JOIN AHD ON flights.sourceairport = AHD	flight_2
SELECT DISTINCT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.uid JOIN AHD ON flights.sourceairport = AHD	flight_2

SELECT airlines.airline FROM airlines JOIN flights ON airlines.uid = flights.airline JOIN APG ON flights.sourceairport = APG	flight_2
SELECT airlines.airline FROM airlines JOIN flights ON airlines.uid = flights.airline JOIN APG ON flights.sourceairport = APG INTERSECT SELECT airlines.airline FROM airlines JOIN flights ON airlines.uid = flights.airline JOIN CVO ON flights.sourceairport = CVO	flight_2

SELECT airlines.airline FROM airlines JOIN flights ON airlines.uid = flights.airline JOIN CVO ON flights.sourceairport = CVO	flight_2
SELECT airlines.airline FROM airlines JOIN flights ON airlines.uid = flights.airline JOIN APG ON flights.sourceairport = APG EXCEPT SELECT airlines.airline FROM airlines JOIN flights ON airlines.uid = flights.airline JOIN CVO ON flights.sourceairport = CVO	flight_2

SELECT * FROM airlines	flight_2
SELECT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.uid GROUP BY airlines.airline HAVING COUNT( * ) > 10	flight_2

SELECT * FROM airlines	flight_2
SELECT airlines.airline FROM airlines JOIN flights ON airlines.uid = flights.airline GROUP BY airlines.airline HAVING COUNT( * )<200	flight_2

SELECT flights.flightno FROM flights	flight_2
SELECT flights.flightno FROM flights JOIN airlines ON flights.airline = airlines.uid JOIN United Airlines ON airlines.airline = United Airlines	flight_2

SELECT flights.flightno FROM flights	flight_2
SELECT flights.flightno FROM flights JOIN APG ON flights.sourceairport = APG	flight_2

SELECT flights.flightno FROM flights	flight_2
SELECT flights.flightno FROM flights JOIN APG ON flights.sourceairport = APG	flight_2

SELECT flights.flightno FROM flights	flight_2
SELECT flights.flightno FROM flights JOIN departure ON flights.sourceairport = departure	flight_2
SELECT flights.flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN Aberdeen ON airports.city = Aberdeen	flight_2

SELECT flights.flightno FROM flights	flight_2
SELECT flights.flightno FROM flights JOIN arrival ON flights.sourceairport = arrival	flight_2
SELECT flights.flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode JOIN Aberdeen ON airports.city = Aberdeen	flight_2

SELECT * FROM flights JOIN airports ON flights.destairport = airports.airportcode JOIN Aberdeen ON airports.city = Aberdeen	flight_2
SELECT * FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN flights ON flights.destairport = airports.airportcode WHERE airports.city = Aberdeen OR airports.city = Abilene	flight_2
SELECT COUNT( * ) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN flights ON flights.destairport = airports.airportcode WHERE airports.city = Aberdeen OR airports.city = Abilene	flight_2

SELECT flights.sourceairport FROM flights	flight_2
SELECT flights.sourceairport , flights.destairport FROM flights	flight_2
SELECT airports.airportname FROM airports EXCEPT SELECT airports.airportname FROM flights JOIN airports ON flights.destairport = airports.airportcode	flight_2

SELECT * FROM pets	pets_1
SELECT * FROM pets WHERE pets.weight > 10	pets_1
SELECT COUNT( * ) FROM pets WHERE pets.weight > 10	pets_1

SELECT * FROM student ORDER BY student.age ASC	pets_1
SELECT pets.weight FROM pets JOIN has_pet ON pets.petid = has_pet.petid ORDER BY student.age ASC	pets_1
SELECT pets.weight FROM pets ORDER BY student.age DESC LIMIT 1	pets_1

SELECT DISTINCT pets.pettype FROM pets	pets_1
SELECT pets.pettype , MAX( pets.weight ) FROM pets GROUP BY pets.pettype	pets_1

SELECT * FROM has_pet JOIN pets ON has_pet.petid = pets.petid JOIN student ON has_pet.stuid = student.stuid WHERE student.age > 20	pets_1
SELECT COUNT( * ) FROM has_pet JOIN student ON has_pet.stuid = student.stuid WHERE student.age > 20	pets_1

SELECT * FROM student JOIN f ON student.sex = f	pets_1
SELECT * FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN f ON student.sex = f	pets_1
SELECT COUNT( * ) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN f ON student.sex = f JOIN has_pet ON has_pet.petid = f	pets_1

SELECT DISTINCT pets.pettype FROM pets	pets_1
SELECT COUNT( DISTINCT pets.pettype ) FROM pets	pets_1

SELECT student.fname FROM student	pets_1
SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON pets.petid = has_pet.petid JOIN cat ON pets.pettype = cat	pets_1
SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid JOIN cat ON pets.pettype = cat INTERSECT SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON pets.petid = has_pet.petid JOIN dog ON pets.pettype = dog	pets_1

SELECT * FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid JOIN dog ON pets.pettype = dog	pets_1
SELECT * FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid JOIN dog ON pets.pettype = dog INTERSECT SELECT * FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid JOIN cat ON pets.pettype = cat	pets_1
SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid JOIN dog ON pets.pettype = dog INTERSECT SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid JOIN cat ON pets.pettype = cat	pets_1

SELECT * FROM has_pet JOIN pets ON has_pet.petid = pets.petid JOIN cat ON pets.pettype = cat	pets_1
SELECT student.major FROM has_pet JOIN pets ON has_pet.petid = pets.petid JOIN has_pet ON has_pet.petid = pets.petid JOIN student ON has_pet.stuid = student.stuid JOIN cat ON pets.pettype = cat	pets_1
SELECT student.age , student.major FROM has_pet JOIN pets ON has_pet.petid = pets.petid JOIN student ON has_pet.stuid = student.stuid JOIN cat ON pets.pettype = cat	pets_1

SELECT student.stuid FROM student	pets_1
SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid JOIN cats ON pets.pettype = cats	pets_1
SELECT student.stuid FROM student EXCEPT SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid JOIN cats ON pets.pettype = cats	pets_1

SELECT * FROM student WHERE student.stuid IN (SELECT has_pet.stuid FROM has_pet)	pets_1
SELECT * FROM student WHERE student.stuid NOT IN (SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid JOIN cat ON pets.pettype = cat)	pets_1
SELECT student.fname , student.age FROM student WHERE student.stuid NOT IN (SELECT has_pet.stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid JOIN cat ON pets.pettype = cat)	pets_1

SELECT * FROM has_pet JOIN pets ON has_pet.petid = pets.petid ORDER BY pets.pet_age ASC LIMIT 1	pets_1
SELECT pets.pettype FROM pets ORDER BY pets.pet_age ASC LIMIT 1	pets_1
SELECT pets.pettype , pets.weight FROM pets ORDER BY pets.pet_age ASC LIMIT 1	pets_1

SELECT has_pet.petid FROM has_pet GROUP BY has_pet.petid	pets_1
SELECT pets.petid FROM pets JOIN has_pet ON pets.petid = has_pet.petid GROUP BY pets.petid HAVING MAX( pets.pet_age ) > 1	pets_1
SELECT pets.petid , pets.weight FROM pets WHERE pets.pet_age > 1	pets_1

SELECT DISTINCT pets.pettype FROM pets	pets_1
SELECT pets.pettype , MAX( student.age ) FROM pets GROUP BY pets.pettype	pets_1
SELECT pets.pettype , AVG( student.age ) FROM pets GROUP BY pets.pettype	pets_1

SELECT * FROM pets	pets_1
SELECT pets.pettype , AVG( pets.weight ) FROM pets GROUP BY pets.pettype	pets_1

SELECT * FROM student JOIN has_pet ON student.stuid = has_pet.stuid	pets_1
SELECT DISTINCT student.fname FROM student WHERE student.stuid IN (SELECT has_pet.stuid FROM has_pet)	pets_1
SELECT DISTINCT student.fname , student.age FROM student JOIN has_pet ON student.stuid = has_pet.stuid	pets_1

SELECT * FROM student JOIN has_pet ON student.stuid = has_pet.stuid	pets_1
SELECT * FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN smith ON student.lname = smith	pets_1
SELECT has_pet.petid FROM has_pet JOIN student ON has_pet.stuid = student.stuid JOIN smith ON student.lname = smith	pets_1

SELECT * FROM student WHERE student.stuid IN (SELECT has_pet.stuid FROM has_pet)	pets_1
SELECT COUNT( * ) , has_pet.stuid FROM has_pet JOIN student ON has_pet.stuid = student.stuid GROUP BY has_pet.stuid	pets_1

SELECT student.fname , student.sex FROM student	pets_1
SELECT student.fname , student.sex FROM student JOIN has_pet ON student.stuid = has_pet.stuid GROUP BY student.stuid HAVING COUNT( * ) > 1	pets_1

SELECT has_pet.petid FROM has_pet JOIN student ON has_pet.stuid = student.stuid JOIN cat ON pets.pettype = cat	pets_1
SELECT DISTINCT student.fname , student.lname FROM has_pet JOIN pets ON has_pet.petid = pets.petid JOIN cat ON pets.pettype = cat	pets_1
has_pet , pets	pets_1

SELECT * FROM student WHERE student.stuid NOT IN (SELECT has_pet.stuid FROM has_pet)	pets_1
SELECT AVG( student.age ) FROM student WHERE student.stuid NOT IN (SELECT has_pet.stuid FROM has_pet)	pets_1

SELECT country.name FROM country	world_1
SELECT country.name FROM country WHERE country.indepyear > 1950	world_1

SELECT COUNT( * ) FROM country	world_1
SELECT COUNT( * ) FROM country JOIN republic ON country.governmentform = republic	world_1

SELECT * FROM country JOIN Carribean ON country.region = Carribean	world_1
SELECT country.surfacearea FROM country JOIN Carribean ON country.region = Carribean	world_1
SELECT SUM( country.surfacearea ) FROM country JOIN Carribean ON country.region = Carribean	world_1

SELECT DISTINCT country.continent FROM country	world_1
SELECT country.continent FROM country JOIN Anguila ON country.name = Anguila	world_1

SELECT country.region FROM country GROUP BY country.region	world_1
SELECT DISTINCT country.region FROM city JOIN country ON city.countrycode = country.code JOIN Kabul ON city.name = Kabul	world_1

SELECT countrylanguage.language FROM countrylanguage	world_1
SELECT countrylanguage.language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code JOIN Aruba ON country.name = Aruba	world_1
SELECT countrylanguage.language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode JOIN Aruba ON country.name = Aruba GROUP BY countrylanguage.language ORDER BY COUNT( * ) DESC LIMIT 1	world_1

SELECT country.population , country.lifeexpectancy FROM country	world_1
SELECT country.population , country.lifeexpectancy FROM country JOIN Brazil ON country.name = Brazil	world_1

SELECT country.region FROM country JOIN Angola ON country.name = Angola	world_1
SELECT country.population FROM country JOIN Angola ON country.name = Angola	world_1

SELECT country.lifeexpectancy FROM country	world_1
SELECT country.lifeexpectancy FROM country JOIN Central Africa ON country.region = Central Africa	world_1
SELECT AVG( country.lifeexpectancy ) FROM country JOIN Central Africa ON country.region = Central Africa	world_1

SELECT country.name FROM country JOIN Asia ON country.region = Asia	world_1
SELECT country.name FROM country JOIN Asia ON country.region = Asia ORDER BY country.lifeexpectancy ASC LIMIT 1	world_1

SELECT COUNT( * ) FROM country JOIN Asia ON country.region = Asia	world_1
SELECT MAX( country.gnp ) FROM country JOIN Asia ON country.continent = Asia	world_1

SELECT * FROM country JOIN Africa ON country.region = Africa	world_1
SELECT country.name FROM country JOIN Africa ON country.region = Africa JOIN republic ON country.governmentform = republic	world_1
SELECT AVG( country.lifeexpectancy ) FROM country JOIN Africa ON country.region = Africa JOIN Africa? Which countries are also republic ON country.continent = Africa? Which countries are also republic JOIN country ON country.region = Africa	world_1

SELECT country.name FROM country WHERE country.continent = Asia OR country.continent = Europe	world_1
SELECT country.surfacearea FROM country WHERE country.region = Asia OR country.region = Europe	world_1
SELECT SUM( country.surfacearea ) FROM country WHERE country.continent = Asia OR country.region = Europe	world_1

SELECT city.population FROM city JOIN Gelderland ON city.district = Gelderland	world_1
SELECT SUM( city.population ) FROM city JOIN Gelderland ON city.district = Gelderland	world_1

SELECT * FROM country	world_1
SELECT country.name FROM country JOIN US territory ON country.governmentform = US territory	world_1
SELECT AVG( country.gnp ) , SUM( country.population ) FROM country JOIN US territory ON country.governmentform = US territory	world_1

SELECT DISTINCT countrylanguage.language FROM countrylanguage	world_1
SELECT COUNT( DISTINCT countrylanguage.language ) FROM countrylanguage	world_1

SELECT DISTINCT country.governmentform FROM country JOIN Africa ON country.continent = Africa	world_1
SELECT COUNT( DISTINCT country.governmentform ) FROM country JOIN Africa ON country.continent = Africa	world_1

SELECT * FROM country JOIN Aruba ON country.name = Aruba	world_1
SELECT countrylanguage.language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode JOIN Aruba ON country.name = Aruba	world_1
SELECT COUNT( * ) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode JOIN Aruba ON country.name = Aruba	world_1

SELECT countrylanguage.language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code JOIN Afghanistan ON country.name = Afghanistan	world_1
SELECT COUNT( * ) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code JOIN Afghanistan ON country.name = Afghanistan	world_1

SELECT COUNT( * ) FROM countrylanguage	world_1
SELECT * FROM countrylanguage GROUP BY countrylanguage.language ORDER BY COUNT( * ) DESC LIMIT 1	world_1

SELECT COUNT( * ) , country.continent FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code GROUP BY country.continent	world_1
SELECT country.continent FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.continent ORDER BY COUNT( * ) DESC LIMIT 1	world_1

SELECT * FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode JOIN English ON countrylanguage.language = English	world_1
SELECT country.name FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code JOIN English ON countrylanguage.language = English INTERSECT SELECT country.name FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code JOIN Dutch ON countrylanguage.language = Dutch	world_1
SELECT COUNT( * ) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code JOIN Dutch ON countrylanguage.language = Dutch	world_1

SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode JOIN English ON countrylanguage.language = English	world_1
SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode JOIN English ON countrylanguage.language = English INTERSECT SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode JOIN French ON countrylanguage.language = French	world_1

SELECT countrylanguage.isofficial FROM countrylanguage	world_1
SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode JOIN English ON countrylanguage.isofficial = English	world_1
SELECT country.name FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code JOIN English ON countrylanguage.isofficial = English INTERSECT SELECT country.name FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code JOIN French ON countrylanguage.language = French	world_1

SELECT * FROM countrylanguage JOIN Chinese ON countrylanguage.language = Chinese	world_1
SELECT DISTINCT country.continent FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode JOIN Chinese ON countrylanguage.language = Chinese	world_1
SELECT COUNT( DISTINCT country.continent ) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode JOIN Chinese ON countrylanguage.language = Chinese	world_1

SELECT DISTINCT country.region FROM country	world_1
SELECT DISTINCT country.region FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = Dutch OR countrylanguage.language = English	world_1

SELECT countrylanguage.isofficial FROM countrylanguage	world_1
SELECT countrylanguage.isofficial FROM countrylanguage WHERE countrylanguage.language = English OR countrylanguage.language = Dutch	world_1

SELECT DISTINCT countrylanguage.language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code JOIN Asia ON country.continent = Asia	world_1
SELECT countrylanguage.language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code JOIN Asia ON country.continent = Asia GROUP BY countrylanguage.language ORDER BY COUNT( * ) DESC LIMIT 1	world_1

SELECT * FROM country JOIN republic ON country.governmentform = republic	world_1
SELECT countrylanguage.language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code JOIN republic ON country.governmentform = republic GROUP BY countrylanguage.language HAVING COUNT( * ) = 1	world_1

SELECT city.name FROM countrylanguage JOIN English ON countrylanguage.language = English	world_1
SELECT city.name FROM city JOIN countrylanguage ON city.id = countrylanguage.countrycode JOIN English ON countrylanguage.language = English ORDER BY city.population DESC LIMIT 1	world_1

SELECT country.name , country.population , country.lifeexpectancy FROM country JOIN Asia ON country.region = Asia	world_1
SELECT country.name , country.population , country.lifeexpectancy FROM country JOIN Asia ON country.region = Asia ORDER BY country.surfacearea DESC LIMIT 1	world_1

SELECT countrylanguage.isofficial FROM countrylanguage	world_1
SELECT countrylanguage.language FROM countrylanguage WHERE countrylanguage.language != English	world_1
SELECT AVG( country.lifeexpectancy ) FROM country WHERE country.code NOT IN (SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.isofficial != English)	world_1

SELECT country.name FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE countrylanguage.language != English	world_1
SELECT COUNT( * ) FROM country WHERE countrylanguage.countrycode NOT IN (SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language != English)	world_1

SELECT * FROM country JOIN Beatrix ON country.headofstate = Beatrix	world_1
SELECT countrylanguage.language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode JOIN Beatrix ON country.headofstate = Beatrix	world_1
SELECT countrylanguage.language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode JOIN Beatrix ON country.headofstate = Beatrix	world_1

SELECT country.name FROM country	world_1
SELECT country.name FROM country WHERE country.indepyear > 1930	world_1
SELECT COUNT( DISTINCT countrylanguage.language ) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.indepyear > 1930	world_1

SELECT * FROM country JOIN European countries ON country.region = European countries	world_1
SELECT MIN( country.surfacearea ) FROM country JOIN European ON country.region = European	world_1
SELECT country.name FROM country WHERE country.surfacearea > (SELECT MIN( country.surfacearea ) FROM country JOIN European ON country.region = European)	world_1

SELECT MAX( country.population ) FROM country JOIN Asia ON country.region = Asia	world_1
SELECT * FROM country WHERE country.population<(SELECT MIN( country.population ) FROM country JOIN Africa ON country.continent = Africa)	world_1

SELECT MIN( country.population ) FROM country JOIN Africa ON country.region = Africa	world_1
SELECT country.region FROM country WHERE country.population > (SELECT MIN( country.population ) FROM country JOIN Asian ON country.continent = Asian)	world_1

SELECT country.code FROM country	world_1
SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language != English	world_1

SELECT country.code FROM country	world_1
NO PREDICTION

NO PREDICTION
NO PREDICTION

SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode JOIN English ON countrylanguage.language = English	world_1
SELECT country.name FROM country JOIN Europe ON country.region = Europe WHERE country.code NOT IN (SELECT countrylanguage.language FROM countrylanguage JOIN Europe ON countrylanguage.isofficial = Europe)	world_1
SELECT city.name FROM country WHERE country.code NOT IN (SELECT country.name FROM country JOIN Europe ON country.region = Europe WHERE countrylanguage.language != English)	world_1

SELECT * FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code JOIN Chinese ON countrylanguage.language = Chinese JOIN Asia ON country.region = Asia	world_1
SELECT * FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode JOIN Asia ON country.region = Asia JOIN Chinese ON country.continent = Chinese	world_1
SELECT DISTINCT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode JOIN Chinese ON countrylanguage.language = Chinese JOIN country ON country.continent = Chinese	world_1

SELECT * FROM country ORDER BY country.population ASC LIMIT 1	world_1
SELECT country.name , country.indepyear , country.surfacearea FROM country ORDER BY country.population ASC LIMIT 1	world_1

SELECT * FROM country ORDER BY country.surfacearea DESC LIMIT 1	world_1
SELECT country.population , country.name , country.headofstate FROM country ORDER BY country.surfacearea DESC LIMIT 1	world_1

SELECT country.name FROM country	world_1
SELECT country.name FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code GROUP BY country.code HAVING COUNT( * ) >= 3	world_1
SELECT country.name , COUNT( * ) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code GROUP BY countrylanguage.countrycode HAVING COUNT( * ) >= 3	world_1

SELECT AVG( city.population ) FROM city	world_1
SELECT COUNT( * ) , city.district FROM city WHERE city.population > (SELECT AVG( city.population ) FROM city) GROUP BY city.district	world_1

SELECT * FROM country GROUP BY country.governmentform HAVING AVG( country.lifeexpectancy ) > 72	world_1
SELECT SUM( country.population ) , country.governmentform FROM country WHERE country.lifeexpectancy > 72	world_1

SELECT country.continent FROM country GROUP BY country.continent HAVING AVG( country.lifeexpectancy )<72	world_1
SELECT AVG( country.lifeexpectancy ) , SUM( country.population ) FROM country WHERE country.lifeexpectancy<72	world_1

SELECT country.name FROM country ORDER BY country.surfacearea DESC LIMIT 5	world_1
SELECT country.surfacearea , country.name FROM country ORDER BY country.surfacearea DESC LIMIT 5	world_1

SELECT * FROM country ORDER BY country.population DESC	world_1
SELECT country.name FROM country ORDER BY country.population DESC LIMIT 3	world_1

SELECT * FROM country ORDER BY country.population ASC	world_1
SELECT country.name FROM country ORDER BY country.population ASC LIMIT 3	world_1

SELECT * FROM country JOIN Asia ON country.continent = Asia	world_1
SELECT COUNT( * ) FROM country JOIN Asia ON country.continent = Asia	world_1

SELECT * FROM country JOIN Europe ON country.continent = Europe	world_1
SELECT country.name FROM country JOIN Europe ON country.continent = Europe WHERE country.population = 80000	world_1

SELECT * FROM country JOIN North America ON country.region = North America	world_1
SELECT country.name FROM country JOIN North America ON country.region = North America WHERE country.surfacearea > 3000	world_1
SELECT SUM( country.population ) , AVG( country.surfacearea ) FROM country JOIN North America ON country.region = North America HAVING AVG( country.surfacearea ) > 3000	world_1

SELECT city.name FROM city	world_1
SELECT city.name FROM city WHERE city.population BETWEEN 160000 and 900000	world_1

SELECT DISTINCT countrylanguage.language FROM countrylanguage	world_1
SELECT countrylanguage.language FROM countrylanguage GROUP BY countrylanguage.language ORDER BY COUNT( * ) DESC LIMIT 1	world_1

SELECT cartoon.directed_by FROM cartoon JOIN Day of the Dark Knight ON cartoon.title = Day of the Dark Knight	tvshow
SELECT cartoon.channel FROM cartoon JOIN Day of the Dark Knight ON cartoon.title = Day of the Dark Knight	tvshow
SELECT cartoon.title FROM cartoon WHERE cartoon.directed_by = Ben Jones OR cartoon.directed_by = Brandon Vietti	tvshow

SELECT * FROM tv_channel JOIN Italian ON tv_channel.language = Italian	tvshow
SELECT * FROM tv_channel JOIN Polish ON tv_channel.language = Polish	tvshow
SELECT tv_channel.country , COUNT( * ) FROM tv_channel GROUP BY tv_channel.country ORDER BY COUNT( * ) DESC LIMIT 1	tvshow

SELECT cartoon.channel FROM cartoon JOIN The Eyes of Despero ON cartoon.title = The Eyes of Despero	tvshow
SELECT tv_channel.series_name FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id JOIN The Eyes of Despero ON cartoon.title = The Eyes of Despero	tvshow
SELECT DISTINCT tv_channel.series_name , tv_channel.content FROM tv_channel	tvshow

SELECT tv_channel.package_option FROM tv_channel JOIN Rock TV ON tv_channel.series_name = Rock TV	tvshow
SELECT tv_channel.language FROM tv_channel JOIN Rock TV ON tv_channel.series_name = Rock TV	tvshow
SELECT tv_channel.language , COUNT( * ) FROM tv_channel GROUP BY tv_channel.language ORDER BY COUNT( * ) ASC LIMIT 1	tvshow

SELECT cartoon.written_by FROM cartoon JOIN The Rise of the Blue Beetle ON cartoon.title = The Rise of the Blue Beetle	tvshow
SELECT cartoon.directed_by FROM cartoon JOIN The Rise of the Blue Beetle ON cartoon.title = The Rise of the Blue Beetle	tvshow
SELECT cartoon.channel FROM cartoon JOIN The Rise of the Blue Beetle ON cartoon.title = The Rise of the Blue Beetle	tvshow

SELECT tv_channel.country FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel JOIN Sky Radio ON tv_channel.series_name = Sky Radio	tvshow
SELECT tv_channel.content FROM tv_channel JOIN Sky Radio ON tv_channel.series_name = Sky Radio	tvshow
SELECT cartoon.title FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id JOIN Sky Radio ON tv_channel.series_name = Sky Radio	tvshow

SELECT tv_series.rating FROM tv_series JOIN Double Down ON tv_series.episode = Double Down	tvshow
SELECT tv_series.rating FROM tv_series JOIN Keepers ON tv_series.episode = Keepers	tvshow
SELECT tv_series.episode , tv_series.rating FROM tv_series ORDER BY tv_series.rating DESC LIMIT 3	tvshow

SELECT tv_series.weekly_rank FROM tv_series JOIN Emily ON tv_series.episode = Emily	tvshow
SELECT tv_series.share FROM tv_series JOIN Emily ON tv_series.episode = Emily	tvshow
SELECT MIN( tv_series.share ) , MAX( tv_series.share ) FROM tv_series	tvshow

SELECT tv_series.rating FROM tv_series JOIN A Love of a Lifetime ON tv_series.episode = A Love of a Lifetime	tvshow
SELECT tv_series.weekly_rank FROM tv_series JOIN A Love of a Lifetime ON tv_series.episode = A Love of a Lifetime	tvshow
SELECT tv_series.channel FROM tv_series JOIN A Love of a Lifetime ON tv_series.episode = A Love of a Lifetime	tvshow

SELECT tv_channel.content FROM tv_channel JOIN Sky Radio ON tv_channel.series_name = Sky Radio	tvshow
SELECT tv_channel.language FROM tv_channel JOIN Sky Radio ON tv_channel.series_name = Sky Radio	tvshow
SELECT tv_series.episode FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel JOIN Sky Radio ON tv_channel.series_name = Sky Radio	tvshow

SELECT cartoon.original_air_date FROM cartoon JOIN Fall of the Blue Beetle ON cartoon.title = Fall of the Blue Beetle	tvshow
SELECT cartoon.production_code FROM cartoon JOIN Fall of the Blue Beetle ON cartoon.title = Fall of the Blue Beetle	tvshow
SELECT cartoon.production_code , cartoon.channel FROM cartoon ORDER BY cartoon.original_air_date DESC LIMIT 1	tvshow

SELECT cartoon.title FROM cartoon JOIN Ben Jone ON cartoon.directed_by = Ben Jone	tvshow
SELECT cartoon.title FROM cartoon JOIN Todd Casey ON cartoon.written_by = Todd Casey	tvshow
SELECT tv_channel.country FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id JOIN tv_series ON tv_channel.id = tv_series.channel JOIN Todd Casey ON cartoon.written_by = Todd Casey	tvshow

SELECT tv_channel.country FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id JOIN tv_series ON tv_series.channel = tv_channel.id JOIN Steven Melching ON cartoon.written_by = Steven Melching	tvshow
SELECT tv_channel.country FROM tv_channel JOIN cartoon ON tv_channel.id = cartoon.channel JOIN Todd Casey ON cartoon.written_by = Todd Casey EXCEPT SELECT tv_channel.country FROM tv_channel JOIN tv_series ON tv_channel.id = tv_series.channel	tvshow

SELECT cartoon.directed_by FROM cartoon JOIN Deep Cover for Batman ON cartoon.title = Deep Cover for Batman	tvshow
SELECT cartoon.production_code FROM cartoon JOIN Deep Cover for Batman ON cartoon.title = Deep Cover for Batman	tvshow
SELECT tv_channel.series_name , tv_channel.country FROM tv_channel JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.directed_by = Ben Jones OR cartoon.directed_by = Michael Chang	tvshow

SELECT tv_channel.country FROM tv_channel JOIN MTV Music ON tv_channel.series_name = MTV Music	tvshow
SELECT COUNT( * ) FROM tv_channel JOIN Italian ON tv_channel.language = Italian	tvshow
SELECT tv_channel.id FROM tv_channel GROUP BY tv_channel.id HAVING COUNT( * ) > 2	tvshow

SELECT cartoon.directed_by FROM cartoon JOIN Return of the Fearsome Fangs ON cartoon.title = Return of the Fearsome Fangs	tvshow
SELECT cartoon.title FROM cartoon JOIN Ben Jones ON cartoon.directed_by = Ben Jones	tvshow
SELECT tv_channel.id FROM tv_channel EXCEPT SELECT cartoon.channel FROM cartoon JOIN Ben Jones ON cartoon.directed_by = Ben Jones	tvshow

SELECT * FROM poker_player	poker_player
SELECT COUNT( * ) FROM poker_player	poker_player

SELECT poker_player.earnings FROM poker_player	poker_player
SELECT poker_player.earnings FROM poker_player ORDER BY poker_player.earnings DESC	poker_player

SELECT * FROM poker_player	poker_player
SELECT poker_player.final_table_made FROM poker_player	poker_player
SELECT poker_player.final_table_made , poker_player.best_finish FROM poker_player	poker_player

SELECT poker_player.earnings FROM poker_player	poker_player
SELECT AVG( poker_player.earnings ) FROM poker_player	poker_player

SELECT poker_player.money_rank FROM poker_player	poker_player
SELECT poker_player.money_rank FROM poker_player ORDER BY poker_player.money_rank DESC	poker_player
SELECT poker_player.money_rank FROM poker_player ORDER BY poker_player.money_rank DESC LIMIT 1	poker_player

SELECT * FROM poker_player WHERE poker_player.earnings<200000	poker_player
SELECT MAX( poker_player.final_table_made ) FROM poker_player WHERE poker_player.earnings<200000	poker_player

SELECT * FROM poker_player	poker_player
SELECT people.name FROM people JOIN poker_player ON people.people_id = poker_player.people_id	poker_player

SELECT * FROM poker_player WHERE poker_player.earnings > 300000	poker_player
SELECT people.name FROM people JOIN poker_player ON people.people_id = poker_player.people_id WHERE poker_player.earnings > 300000	poker_player

SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id	poker_player
SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.final_table_made ASC	poker_player

SELECT people.birth_date FROM people JOIN poker_player ON people.people_id = poker_player.people_id	poker_player
SELECT people.birth_date FROM people JOIN poker_player ON people.people_id = poker_player.people_id ORDER BY poker_player.earnings ASC	poker_player
SELECT people.birth_date FROM people JOIN poker_player ON people.people_id = poker_player.people_id ORDER BY poker_player.earnings ASC LIMIT 1	poker_player

SELECT people.height FROM poker_player JOIN people ON poker_player.people_id = people.people_id	poker_player
SELECT people.name FROM people JOIN poker_player ON people.people_id = poker_player.people_id ORDER BY people.height DESC LIMIT 1	poker_player
SELECT poker_player.money_rank FROM people JOIN poker_player ON people.people_id = poker_player.people_id ORDER BY people.height DESC LIMIT 1	poker_player

SELECT people.height FROM poker_player JOIN people ON poker_player.people_id = people.people_id	poker_player
SELECT * FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE people.height > 200	poker_player
SELECT AVG( poker_player.earnings ) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE people.height > 200	poker_player

SELECT * FROM poker_player ORDER BY poker_player.earnings DESC	poker_player
SELECT people.name FROM people JOIN poker_player ON people.people_id = poker_player.people_id ORDER BY poker_player.earnings DESC	poker_player

SELECT people.nationality FROM people	poker_player
SELECT * FROM people GROUP BY people.nationality	poker_player
SELECT people.nationality , COUNT( * ) FROM people GROUP BY people.nationality	poker_player

SELECT people.nationality FROM people	poker_player
SELECT people.nationality , COUNT( * ) FROM people GROUP BY people.nationality	poker_player
SELECT people.nationality FROM people GROUP BY people.nationality ORDER BY COUNT( * ) DESC LIMIT 1	poker_player

SELECT people.nationality , COUNT( * ) FROM people GROUP BY people.nationality	poker_player
SELECT people.nationality FROM people GROUP BY people.nationality HAVING COUNT( * ) >= 2	poker_player

SELECT people.name , people.birth_date FROM people	poker_player
SELECT people.name , people.birth_date FROM people ORDER BY people.name ASC	poker_player

SELECT people.name FROM people	poker_player
SELECT people.name FROM people WHERE people.nationality != Russia	poker_player

SELECT * FROM poker_player	poker_player
SELECT people.name FROM people WHERE people.people_id NOT IN (SELECT poker_player.people_id FROM poker_player)	poker_player
SELECT people.name FROM people WHERE people.people_id NOT IN (SELECT poker_player.people_id FROM poker_player)	poker_player

SELECT death.killed FROM death	battle_death
SELECT MAX( death.killed ) FROM death	battle_death
SELECT MIN( death.killed ) FROM death	battle_death
SELECT AVG( death.killed ) , MAX( death.killed ) , MIN( death.killed ) FROM death	battle_death

SELECT * FROM death	battle_death
SELECT * FROM death JOIN ship ON death.caused_by_ship_id = ship.id JOIN ship ON ship.tonnage = t	battle_death
SELECT * , death.injured FROM death JOIN ship ON death.caused_by_ship_id = ship.id JOIN ship ON ship.tonnage = t	battle_death

SELECT battle.id , battle.name FROM battle	battle_death
SELECT battle.id , battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle	battle_death
SELECT battle.id , battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle JOIN Brig ON ship.ship_type = Brig	battle_death

SELECT death.killed , death.injured FROM battle JOIN death ON battle.id = death.id	battle_death
SELECT death.killed FROM battle JOIN death ON battle.id = death.killed GROUP BY death.killed HAVING COUNT( * ) >= 2	battle_death

SELECT ship.id , ship.name , death.injured FROM death JOIN ship ON death.caused_by_ship_id = ship.id	battle_death
SELECT ship.id , ship.name FROM death JOIN ship ON death.caused_by_ship_id = ship.id ORDER BY death.injured DESC	battle_death
SELECT ship.id , ship.name FROM ship JOIN death ON ship.id = death.caused_by_ship_id GROUP BY ship.id ORDER BY SUM( death.injured ) DESC LIMIT 1	battle_death

SELECT * FROM battle JOIN Kaloyan ON battle.bulgarian_commander = Kaloyan	battle_death
SELECT * FROM battle JOIN Baldwin I ON battle.latin_commander = Baldwin I	battle_death
SELECT battle.name FROM battle WHERE battle.bulgarian_commander = bulgarian commander 'Kaloyan OR battle.latin_commander = Baldwin I	battle_death

SELECT ship.lost_in_battle FROM ship WHERE ship.tonnage = 225	battle_death
SELECT battle.name , battle.id FROM ship JOIN battle ON ship.lost_in_battle = battle.id WHERE ship.tonnage = 225	battle_death
SELECT battle.id , battle.name FROM battle EXCEPT SELECT battle.id , battle.name FROM ship JOIN battle ON ship.lost_in_battle = battle.id WHERE ship.tonnage = 225	battle_death
SELECT COUNT( * ) FROM battle WHERE battle.id NOT IN (SELECT ship.lost_in_battle FROM ship WHERE ship.tonnage = 225)	battle_death

SELECT battle.name , battle.date FROM battle JOIN ship ON battle.id = ship.lost_in_battle JOIN Lettice ON ship.name = Lettice	battle_death
SELECT battle.name , battle.date FROM battle JOIN ship ON battle.id = ship.lost_in_battle JOIN HMS Atlanta ON ship.name = HMS Atlanta	battle_death
SELECT battle.name , battle.date FROM battle JOIN ship ON battle.id = ship.lost_in_battle JOIN Lettice ON ship.name = Lettice INTERSECT SELECT battle.name , battle.date FROM battle JOIN ship ON battle.id = ship.lost_in_battle JOIN HMS Atlanta ON ship.name = HMS Atlanta	battle_death

SELECT battle.id , battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle JOIN English Channel ON ship.location = English Channel	battle_death
SELECT battle.id , battle.name FROM battle WHERE battle.id NOT IN (SELECT ship.lost_in_battle FROM ship JOIN English Channel ON ship.location = English Channel)	battle_death
SELECT battle.name , battle.name , battle.result , battle.bulgarian_commander FROM battle WHERE battle.id NOT IN (SELECT ship.lost_in_battle FROM ship JOIN English Channel ON ship.location = English Channel)	battle_death

SELECT COUNT( * ) FROM continents	car_1
SELECT continents.contid , continents.continent FROM continents	car_1
NO PREDICTION
SELECT continents.continent , countries.continent , COUNT( * ) FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY countries.continent	car_1

SELECT car_makers.fullname , car_makers.maker , car_makers.id FROM car_makers	car_1
SELECT countries.countryname , car_makers.maker , car_makers.country FROM car_makers JOIN countries ON car_makers.country = countries.countryid	car_1
SELECT COUNT( * ) , countries.countryname FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN countries ON car_makers.country = countries.countryid GROUP BY countries.countryname	car_1
SELECT countries.countryname , car_makers.fullname , car_makers.id , COUNT( * ) FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id	car_1

SELECT AVG( cars_data.horsepower ) FROM cars_data	car_1
SELECT MAX( cars_data.horsepower ) FROM cars_data	car_1
SELECT MIN( cars_data.horsepower ) FROM cars_data	car_1
SELECT model_list.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid ORDER BY cars_data.horsepower ASC LIMIT 1	car_1

SELECT AVG( cars_data.weight ) FROM cars_data	car_1
SELECT * FROM cars_data WHERE cars_data.weight > (SELECT AVG( cars_data.weight ) FROM cars_data)	car_1
SELECT * FROM cars_data WHERE cars_data.weight<(SELECT AVG( cars_data.weight ) FROM cars_data)	car_1
SELECT car_names.model FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.weight<(SELECT AVG( cars_data.weight ) FROM cars_data)	car_1

SELECT car_names.model , model_list.modelid FROM cars_data JOIN model_list ON cars_data.id = model_list.model WHERE cars_data.year = 1970	car_1
SELECT cars_data.id , cars_data.horsepower , car_names.model , cars_data.mpg FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.year = 1970	car_1
car_makers.id = car_makers.id	car_1
car_makers , car_names	car_1

SELECT car_names.make , car_names.model FROM car_names	car_1
SELECT car_names.make , car_names.model , cars_data.year FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid	car_1
SELECT car_names.make , car_names.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid ORDER BY cars_data.year ASC LIMIT 1	car_1
SELECT car_names.make , cars_data.year FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid ORDER BY cars_data.year ASC LIMIT 1	car_1

SELECT model_list.model FROM model_list	car_1
SELECT car_names.make , cars_data.year FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON cars_data.id = car_names.makeid	car_1
SELECT DISTINCT car_makers.maker FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.year > 1980	car_1
SELECT DISTINCT car_names.model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.year > 1980	car_1

SELECT car_makers.fullname , car_makers.maker , car_makers.country FROM car_makers	car_1
SELECT countries.continent , car_makers.maker , countries.countryname FROM car_makers , countries , car_names , continents	car_1
SELECT car_makers.fullname , countries.countryname , continents.continent , COUNT( * ) FROM car_makers JOIN countries ON car_makers.country = countries.countryid JOIN continents ON countries.continent = continents.contid GROUP BY continents.continent	car_1

SELECT COUNT( * ) FROM countries	car_1
NO PREDICTION
SELECT countries.countryname FROM car_makers JOIN countries ON car_makers.country = countries.countryid GROUP BY car_makers.country ORDER BY COUNT( * ) ASC LIMIT 1	car_1
SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname ORDER BY COUNT( * ) DESC LIMIT 1	car_1

SELECT COUNT( * ) FROM car_makers	car_1
SELECT car_makers.fullname , car_makers.id FROM car_makers	car_1
SELECT model_list.model , car_makers.fullname , model_list.model , car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.maker	car_1
SELECT COUNT( * ) , car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.maker	car_1

SELECT car_names.makeid FROM car_names JOIN amc hornet sporabout ON car_names.make = amc hornet sporabout	car_1
SELECT cars_data.horsepower FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN amc hornet sporabout ON car_names.make = amc hornet sporabout	car_1
SELECT cars_data.mpg FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN amc hornet sporabout ON car_names.make = amc hornet sporabout	car_1
SELECT cars_data.accelerate FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN amc hornet sporabout ON car_names.make = amc hornet sporabout	car_1

SELECT DISTINCT car_makers.maker FROM car_makers	car_1
SELECT countries.countryname FROM car_makers JOIN countries ON car_makers.country = countries.countryid	car_1
SELECT * FROM car_makers JOIN countries ON car_makers.country = countries.countryid JOIN France ON countries.countryname = France	car_1
SELECT COUNT( * ) FROM car_makers JOIN countries ON car_makers.country = countries.countryid JOIN France ON countries.countryname = France	car_1

SELECT COUNT( DISTINCT model_list.model ) FROM model_list	car_1
SELECT COUNT( model_list.model ) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN Germany ON car_makers.country = Germany	car_1
SELECT COUNT( model_list.model ) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN Japan ON car_makers.country = Japan	car_1
SELECT COUNT( model_list.model ) FROM model_list JOIN countries ON model_list.maker = countries.countryid JOIN USA ON countries.countryname = USA	car_1

SELECT * FROM cars_data WHERE cars_data.year = 1974	car_1
SELECT cars_data.weight , cars_data.cylinders FROM cars_data WHERE cars_data.year = 1974	car_1
SELECT cars_data.weight , cars_data.cylinders FROM cars_data WHERE cars_data.year = 1974 AND cars_data.cylinders = 8	car_1
SELECT MIN( cars_data.weight ) FROM cars_data WHERE cars_data.year = 1974 AND cars_data.cylinders = 8	car_1

SELECT DISTINCT countries.countryname FROM countries	car_1
SELECT countries.countryname FROM countries WHERE countries.countryid NOT IN (SELECT car_makers.country FROM car_makers)	car_1
SELECT countries.countryname FROM countries WHERE countries.countryid IN (SELECT car_makers.country FROM car_makers)	car_1
SELECT countries.countryname , countries.countryid FROM countries WHERE countries.countryid IN (SELECT car_makers.country FROM car_makers)	car_1

SELECT * FROM car_makers JOIN countries ON car_makers.country = countries.countryid	car_1
SELECT countries.countryname , COUNT( * ) FROM car_makers JOIN countries ON car_makers.country = countries.countryid GROUP BY countries.countryname	car_1
SELECT COUNT( * ) , countries.countryname FROM car_makers JOIN countries ON car_makers.country = countries.countryid JOIN Europe ON countries.continent = Europe GROUP BY countries.countryname	car_1
SELECT countries.countryname FROM car_makers JOIN countries ON car_makers.country = countries.countryid GROUP BY countries.countryname HAVING COUNT( * ) >= 3	car_1

SELECT cars_data.horsepower , car_names.make FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid	car_1
SELECT cars_data.horsepower , car_names.make FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.cylinders = 8	car_1
SELECT cars_data.horsepower , car_names.make FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.cylinders = 3	car_1
SELECT car_names.makeid , car_names.make FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid ORDER BY cars_data.horsepower DESC LIMIT 1	car_1

SELECT cars_data.id FROM cars_data ORDER BY cars_data.horsepower DESC LIMIT 1	car_1
SELECT cars_data.id FROM cars_data ORDER BY cars_data.mpg DESC LIMIT 1	car_1
SELECT car_names.make FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid ORDER BY cars_data.mpg DESC LIMIT 1	car_1
SELECT model_list.model FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id ORDER BY cars_data.mpg DESC LIMIT 1	car_1

SELECT AVG( cars_data.edispl ) FROM cars_data	car_1
SELECT AVG( cars_data.edispl ) , car_makers.maker FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN car_makers ON car_makers.id = car_names.make GROUP BY car_makers.maker	car_1
SELECT AVG( cars_data.edispl ) , car_names.model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model GROUP BY car_names.model	car_1
SELECT car_names.model , AVG( cars_data.edispl ) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN volvo ON model_list.model = volvo GROUP BY car_names.model	car_1

SELECT car_names.model FROM car_names GROUP BY car_names.model	car_1
SELECT car_names.make , car_names.model FROM car_names	car_1
SELECT COUNT( DISTINCT car_makers.maker ) , car_names.model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model GROUP BY car_names.model	car_1
SELECT model_list.model FROM model_list JOIN car_names ON model_list.model = car_names.model GROUP BY car_names.model ORDER BY COUNT( * ) DESC LIMIT 1	car_1

SELECT car_makers.fullname FROM car_makers	car_1
SELECT car_makers.fullname , model_list.model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.makeid	car_1
SELECT model_list.model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN American Motor Company ON car_makers.fullname = American Motor Company	car_1
SELECT COUNT( * ) FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN American Motor Company ON car_makers.fullname = American Motor Company	car_1

SELECT * FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id HAVING COUNT( * ) = 1	car_1
SELECT car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.maker HAVING COUNT( * ) > 1	car_1
SELECT * FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.maker HAVING COUNT( * ) > 3	car_1
SELECT car_makers.fullname , car_makers.id FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id HAVING COUNT( * ) > 3	car_1

SELECT COUNT( model_list.model ) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN General Motors ON car_makers.fullname = General Motors	car_1
SELECT COUNT( DISTINCT model_list.model ) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN General Motors ON car_makers.fullname = General Motors WHERE cars_data.weight > 3500	car_1
SELECT COUNT( * ) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN model_list ON model_list.maker = car_makers.id JOIN car_names ON car_makers.id = car_names.model WHERE car_makers.fullname = General Motors OR cars_data.weight > 3500	car_1
SELECT DISTINCT model_list.model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN cars_data ON car_names.makeid = cars_data.id WHERE car_makers.fullname = General Motors OR cars_data.weight > 3500	car_1

SELECT cars_data.year , cars_data.weight FROM cars_data	car_1
SELECT DISTINCT cars_data.year FROM cars_data WHERE cars_data.weight > 3000	car_1
SELECT DISTINCT cars_data.year FROM cars_data WHERE cars_data.weight<4000	car_1
SELECT cars_data.year FROM cars_data WHERE cars_data.weight > 3000 INTERSECT SELECT cars_data.year FROM cars_data WHERE cars_data.weight<4000	car_1

SELECT MIN( cars_data.accelerate ) FROM cars_data	car_1
SELECT MAX( cars_data.accelerate ) FROM cars_data	car_1
SELECT car_names.makeid , car_names.make , car_names.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid ORDER BY cars_data.accelerate DESC LIMIT 1	car_1
SELECT cars_data.horsepower FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid ORDER BY cars_data.accelerate DESC LIMIT 1	car_1

SELECT * FROM car_names JOIN volvo ON car_names.model = volvo	car_1
SELECT * FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id JOIN volvo ON car_names.model = volvo ORDER BY cars_data.accelerate ASC LIMIT 1	car_1
SELECT cars_data.horsepower FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN volvo ON car_names.model = volvo ORDER BY cars_data.accelerate ASC LIMIT 1	car_1
SELECT cars_data.cylinders FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN volvo ON model_list.model = volvo ORDER BY cars_data.accelerate ASC LIMIT 1	car_1

SELECT MAX( cars_data.horsepower ) FROM cars_data	car_1
SELECT cars_data.accelerate FROM cars_data ORDER BY cars_data.horsepower DESC LIMIT 1	car_1
SELECT cars_data.id FROM cars_data WHERE cars_data.accelerate > (SELECT MAX( cars_data.accelerate ) FROM cars_data)	car_1
SELECT COUNT( DISTINCT cars_data.id ) FROM cars_data WHERE cars_data.accelerate > (SELECT MAX( cars_data.accelerate ) FROM cars_data)	car_1

SELECT countries.countryname FROM countries WHERE countries.countryid NOT IN (SELECT car_makers.country FROM car_makers)	car_1
SELECT countries.countryname FROM countries WHERE countries.countryid NOT IN (SELECT car_makers.country FROM car_makers)	car_1
car_makers , car_makers	car_1
SELECT countries.countryname FROM car_makers JOIN countries ON car_makers.country = countries.countryid GROUP BY car_makers.country HAVING COUNT( * ) > 2	car_1

SELECT model_list.model , cars_data.horsepower FROM model_list JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id	car_1
SELECT car_names.model , cars_data.horsepower FROM cars_data WHERE cars_data.cylinders = 4	car_1
SELECT model_list.model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id WHERE cars_data.cylinders = 4 ORDER BY cars_data.horsepower ASC LIMIT 1	car_1
SELECT car_names.model FROM model_list JOIN cars_data ON model_list.modelid = cars_data.id ORDER BY cars_data.horsepower DESC LIMIT 1	car_1

SELECT MIN( cars_data.horsepower ) FROM cars_data	car_1
SELECT car_makers.id , car_makers.maker FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.horsepower > (SELECT AVG( cars_data.horsepower ) FROM cars_data)	car_1
SELECT car_makers.id , car_names.make FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid GROUP BY cars_data.id HAVING SUM( cars_data.cylinders ) <= 5	car_1
SELECT cars_data.id , car_names.make FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.horsepower > (SELECT MIN( cars_data.horsepower ) FROM cars_data WHERE cars_data.cylinders <= 3)	car_1

SELECT cars_data.mpg , cars_data.horsepower , cars_data.accelerate FROM cars_data WHERE cars_data.year<1980	car_1
SELECT cars_data.mpg , cars_data.horsepower , cars_data.accelerate FROM cars_data WHERE cars_data.cylinders = 8 OR cars_data.year<1980	car_1
SELECT MAX( cars_data.horsepower ) FROM cars_data WHERE cars_data.cylinders = 8 OR cars_data.year<1980	car_1
SELECT MAX( cars_data.mpg ) FROM cars_data WHERE cars_data.cylinders = 8 AND cars_data.year<1980	car_1

SELECT model_list.model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN Ford Motor Company ON car_makers.maker = Ford Motor Company	car_1
SELECT car_names.model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.maker != Ford Motor Company	car_1
SELECT DISTINCT car_names.make , cars_data.weight FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN model_list ON model_list.model = car_names.model JOIN Ford Motor Company ON car_makers.maker = Ford Motor Company	car_1
car_makers.fullname = Ford Motor Company	car_1

SELECT countries.countryname FROM countries	car_1
SELECT countries.countryname FROM countries WHERE countries.countryid IN (SELECT car_makers.country FROM car_makers)	car_1
SELECT countries.countryname FROM countries WHERE countries.countryid NOT IN (SELECT car_makers.country FROM car_makers)	car_1

SELECT car_makers.id , car_makers.fullname , car_names.model , car_names.make FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.maker = car_names.makeid	car_1
SELECT car_makers.id , car_makers.maker , COUNT( * ) FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id	car_1
SELECT car_makers.id , car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id HAVING COUNT( * ) >= 2	car_1
SELECT car_makers.id , car_makers.maker FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id HAVING COUNT( * ) > 3	car_1

SELECT COUNT( * ) FROM matches	wta_1
SELECT MAX( matches.minutes ) FROM matches	wta_1
SELECT AVG( matches.minutes ) FROM matches	wta_1
SELECT matches.loser_age , matches.winner_age , AVG( matches.minutes ) FROM matches	wta_1

SELECT COUNT( DISTINCT matches.tourney_name ) FROM matches	wta_1
SELECT matches.tourney_name FROM matches GROUP BY matches.tourney_name HAVING COUNT( * ) > 20	wta_1
SELECT matches.tourney_name FROM matches GROUP BY matches.tourney_name HAVING COUNT( * ) > 10	wta_1

SELECT COUNT( DISTINCT matches.winner_id ) FROM matches WHERE matches.year = 2013	wta_1
SELECT COUNT( DISTINCT players.player_id ) FROM players, matches WHERE players.player_id = (SELECT matches.winner_id FROM matches WHERE matches.year = 2013 INTERSECT SELECT matches.winner_id FROM matches WHERE matches.year = 2016)	wta_1
SELECT matches.winner_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.year = 2013 INTERSECT SELECT matches.winner_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.year = 2016	wta_1

SELECT COUNT( * ) FROM matches	wta_1
SELECT COUNT( * ) FROM matches JOIN L ON matches.loser_hand = L	wta_1
SELECT COUNT( * ) FROM matches WHERE matches.loser_hand = L OR matches.year = 2016	wta_1

SELECT COUNT( * ) FROM players	wta_1
SELECT players.last_name , players.birth_date FROM players JOIN matches ON players.player_id = matches.winner_id JOIN WTA Championships ON matches.tourney_name = WTA Championships	wta_1
SELECT players.first_name , players.country_code FROM players JOIN matches ON players.player_id = matches.winner_id JOIN WTA Championships ON matches.tourney_name = WTA Championships	wta_1
SELECT players.first_name , players.country_code FROM players JOIN matches ON players.player_id = matches.winner_id JOIN WTA Championships ON matches.tourney_name = WTA Championships INTERSECT SELECT players.first_name , players.country_code FROM players JOIN matches ON players.player_id = matches.winner_id JOIN Australian Open ON matches.tourney_name = Australian Open	wta_1

SELECT players.birth_date FROM players ORDER BY players.birth_date DESC LIMIT 1	wta_1
SELECT players.player_id , players.last_name FROM players ORDER BY players.birth_date DESC LIMIT 1	wta_1
SELECT players.first_name , players.last_name , players.country_code FROM players ORDER BY players.birth_date DESC LIMIT 1	wta_1

SELECT COUNT( * ) FROM players WHERE players.hand = right OR players.hand = R	wta_1
SELECT COUNT( * ) FROM players WHERE players.hand = L OR players.hand = Left	wta_1
SELECT players.country_code , players.birth_date FROM players WHERE players.hand = right OR players.hand = L	wta_1
SELECT players.first_name , players.last_name FROM players JOIN L ON players.hand = L ORDER BY players.birth_date ASC	wta_1

SELECT COUNT( * ) FROM players	wta_1
SELECT players.first_name , players.last_name FROM players JOIN rankings ON players.player_id = rankings.player_id ORDER BY rankings.tours ASC LIMIT 1	wta_1
SELECT players.first_name , players.last_name FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name , players.last_name ORDER BY SUM( rankings.tours ) DESC LIMIT 1	wta_1
SELECT players.first_name , players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id ORDER BY rankings.tours DESC LIMIT 1	wta_1

SELECT COUNT( * ) FROM matches	wta_1
NO PREDICTION
SELECT matches.year FROM matches GROUP BY matches.year ORDER BY COUNT( * ) DESC LIMIT 1	wta_1

SELECT matches.loser_name FROM matches GROUP BY matches.loser_name ORDER BY COUNT( * ) DESC LIMIT 1	wta_1
SELECT matches.loser_name , matches.loser_rank_points FROM matches GROUP BY matches.loser_name ORDER BY COUNT( * ) DESC LIMIT 1	wta_1
SELECT matches.loser_name , rankings.ranking_points FROM matches JOIN rankings ON matches.winner_rank_points = rankings.player_id GROUP BY matches.winner_rank_points ORDER BY COUNT( * ) DESC LIMIT 1	wta_1

SELECT matches.loser_name FROM matches ORDER BY matches.loser_rank_points DESC LIMIT 1	wta_1
SELECT matches.loser_name FROM matches JOIN Australian Open ON matches.tourney_name = Australian Open ORDER BY matches.loser_rank_points DESC LIMIT 1	wta_1
SELECT matches.winner_name FROM matches JOIN Australian Open ON matches.tourney_name = Australian Open ORDER BY matches.winner_rank_points DESC LIMIT 1	wta_1

SELECT matches.minutes FROM matches ORDER BY matches.minutes ASC LIMIT 1	wta_1
SELECT matches.minutes FROM matches ORDER BY matches.minutes DESC LIMIT 1	wta_1
SELECT matches.winner_name , matches.loser_name FROM matches ORDER BY matches.minutes DESC LIMIT 1	wta_1

SELECT players.birth_date FROM players	wta_1
SELECT rankings.tours , players.first_name FROM players JOIN rankings ON players.player_id = rankings.player_id	wta_1
SELECT AVG( rankings.ranking ) , players.first_name FROM rankings JOIN players ON rankings.player_id = players.player_id	wta_1

SELECT players.first_name , players.last_name , rankings.tours FROM players JOIN rankings ON players.player_id = rankings.player_id	wta_1
SELECT AVG( rankings.ranking_points ) , players.first_name FROM rankings JOIN players ON rankings.player_id = players.player_id	wta_1
SELECT SUM( rankings.ranking_points ) , players.first_name FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY rankings.player_id	wta_1

SELECT players.country_code , COUNT( * ) FROM players GROUP BY players.country_code	wta_1
SELECT players.country_code FROM players GROUP BY players.country_code ORDER BY COUNT( * ) ASC LIMIT 1	wta_1
SELECT players.country_code , COUNT( * ) FROM players GROUP BY players.country_code ORDER BY COUNT( * ) DESC LIMIT 1	wta_1

SELECT players.hand , COUNT( * ) FROM players JOIN matches ON players.player_id = matches.loser_id GROUP BY players.hand	wta_1
SELECT players.country_code , players.hand , COUNT( * ) FROM players GROUP BY players.country_code	wta_1
SELECT players.country_code , COUNT( * ) FROM players GROUP BY players.country_code HAVING COUNT( * ) > 50	wta_1
SELECT players.country_code FROM players GROUP BY players.country_code HAVING COUNT( * ) > 50	wta_1

SELECT matches.loser_name FROM matches ORDER BY matches.loser_name DESC LIMIT 3	wta_1
SELECT matches.loser_name FROM matches ORDER BY matches.winner_name DESC LIMIT 3	wta_1
SELECT matches.loser_name , matches.winner_rank FROM matches ORDER BY matches.winner_rank DESC LIMIT 3	wta_1

SELECT COUNT( * ) FROM matches JOIN Australian Open ON matches.tourney_name = Australian Open	wta_1
SELECT COUNT( * ) FROM matches JOIN Australian Open ON matches.tourney_name = Australian Open	wta_1
SELECT COUNT( DISTINCT matches.loser_name ) FROM players JOIN matches ON players.player_id = matches.winner_id JOIN WTA Championships ON players.hand = WTA Championships JOIN matches ON matches.tourney_name = WTA Championships	wta_1

SELECT * FROM conductor	orchestra
SELECT COUNT( * ) FROM conductor	orchestra

SELECT conductor.name FROM conductor	orchestra
SELECT conductor.age FROM conductor	orchestra
SELECT conductor.name FROM conductor ORDER BY conductor.age ASC	orchestra

SELECT conductor.name FROM conductor	orchestra
SELECT conductor.name FROM conductor WHERE conductor.nationality != USA	orchestra

SELECT * FROM orchestra	orchestra
SELECT orchestra.year_of_founded FROM orchestra	orchestra
SELECT orchestra.record_company FROM orchestra ORDER BY orchestra.year_of_founded DESC	orchestra

SELECT show.attendance FROM show	orchestra
SELECT AVG( show.attendance ) FROM show	orchestra

SELECT performance.share FROM performance	orchestra
SELECT performance.share FROM performance WHERE performance.type != Live final	orchestra
SELECT MAX( performance.share ) , MIN( performance.share ) FROM performance WHERE performance.type != Live final	orchestra

SELECT conductor.nationality FROM conductor	orchestra
SELECT COUNT( DISTINCT conductor.nationality ) FROM conductor	orchestra

SELECT conductor.name FROM conductor	orchestra
SELECT conductor.year_of_work FROM conductor	orchestra
SELECT conductor.name FROM conductor ORDER BY conductor.year_of_work DESC	orchestra

SELECT conductor.name FROM conductor	orchestra
SELECT conductor.year_of_work FROM conductor	orchestra
SELECT conductor.name FROM conductor ORDER BY conductor.year_of_work DESC LIMIT 1	orchestra

SELECT conductor.name FROM conductor	orchestra
SELECT conductor.name , orchestra.orchestra FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id	orchestra

SELECT conductor.name FROM conductor	orchestra
SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.conductor_id HAVING COUNT( * ) > 1	orchestra

SELECT conductor.name FROM conductor	orchestra
SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.conductor_id ORDER BY COUNT( * ) DESC LIMIT 1	orchestra

SELECT conductor.name FROM conductor	orchestra
SELECT conductor.name FROM orchestra JOIN conductor ON orchestra.conductor_id = conductor.conductor_id WHERE orchestra.year_of_founded > 2008	orchestra

SELECT DISTINCT orchestra.record_company FROM orchestra	orchestra
SELECT orchestra.record_company , COUNT( * ) FROM orchestra GROUP BY orchestra.record_company	orchestra

SELECT orchestra.major_record_format FROM orchestra	orchestra
SELECT orchestra.major_record_format FROM orchestra GROUP BY orchestra.major_record_format ORDER BY COUNT( * ) ASC	orchestra

SELECT * FROM orchestra GROUP BY orchestra.record_company	orchestra
SELECT orchestra.record_company FROM orchestra GROUP BY orchestra.record_company ORDER BY COUNT( * ) DESC LIMIT 1	orchestra

SELECT orchestra.orchestra FROM orchestra	orchestra
SELECT orchestra.orchestra FROM orchestra WHERE orchestra.orchestra_id NOT IN (SELECT performance.orchestra_id FROM performance)	orchestra

SELECT orchestra.record_company FROM orchestra	orchestra
SELECT orchestra.record_company FROM orchestra WHERE orchestra.year_of_founded<2003 GROUP BY orchestra.record_company	orchestra
SELECT orchestra.record_company FROM orchestra WHERE orchestra.year_of_founded > 2003 INTERSECT SELECT orchestra.record_company FROM orchestra WHERE orchestra.year_of_founded<2003	orchestra
SELECT orchestra.record_company FROM orchestra WHERE orchestra.year_of_founded<2003 INTERSECT SELECT orchestra.record_company FROM orchestra WHERE orchestra.year_of_founded > 2003	orchestra

SELECT orchestra.orchestra FROM orchestra WHERE orchestra.major_record_format = CD OR orchestra.major_record_format = DVD	orchestra
SELECT COUNT( * ) FROM orchestra WHERE orchestra.major_record_format = CD OR orchestra.major_record_format = DVD	orchestra

SELECT * FROM documents	cre_Doc_Template_Mgt
SELECT documents.document_id FROM documents	cre_Doc_Template_Mgt
SELECT documents.document_id , documents.document_name , documents.document_description FROM documents	cre_Doc_Template_Mgt

SELECT documents.document_name FROM documents	cre_Doc_Template_Mgt
SELECT documents.document_name , documents.document_description FROM documents	cre_Doc_Template_Mgt
SELECT documents.document_name FROM documents WHERE documents.document_description<w	cre_Doc_Template_Mgt
SELECT documents.document_name , documents.template_id FROM documents JOIN templates ON documents.template_id = templates.template_id INTERSECT SELECT documents.document_name , documents.template_id FROM documents JOIN templates ON documents.template_id = templates.template_id	cre_Doc_Template_Mgt

SELECT documents.document_name FROM documents	cre_Doc_Template_Mgt
SELECT documents.document_id FROM documents JOIN Robbin CV ON documents.document_name = Robbin CV	cre_Doc_Template_Mgt
SELECT documents.document_id , documents.template_id , documents.document_description FROM documents JOIN Robbin CV ON documents.document_name = Robbin CV	cre_Doc_Template_Mgt

SELECT documents.template_id FROM documents	cre_Doc_Template_Mgt
SELECT DISTINCT documents.template_id FROM documents	cre_Doc_Template_Mgt
SELECT COUNT( DISTINCT documents.template_id ) FROM documents	cre_Doc_Template_Mgt

SELECT documents.document_id FROM documents	cre_Doc_Template_Mgt
SELECT templates.template_type_code , documents.document_id , documents.template_id FROM documents JOIN templates ON documents.template_id = templates.template_id	cre_Doc_Template_Mgt
SELECT documents.document_id FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN PPT ON templates.template_type_code = PPT	cre_Doc_Template_Mgt
SELECT COUNT( * ) FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN PPT ON templates.template_type_code = PPT	cre_Doc_Template_Mgt

SELECT documents.template_id FROM documents	cre_Doc_Template_Mgt
SELECT documents.template_id , COUNT( * ) FROM documents GROUP BY documents.template_id	cre_Doc_Template_Mgt

SELECT documents.template_id FROM documents	cre_Doc_Template_Mgt
SELECT templates.template_type_code , documents.template_id FROM documents JOIN templates ON documents.template_id = templates.template_id	cre_Doc_Template_Mgt
SELECT documents.template_id , templates.template_type_code , COUNT( * ) FROM documents JOIN templates ON documents.template_id = templates.template_id GROUP BY documents.template_id	cre_Doc_Template_Mgt
SELECT templates.template_type_code , documents.template_id FROM documents JOIN templates ON documents.template_id = templates.template_id GROUP BY documents.template_id ORDER BY COUNT( * ) DESC LIMIT 1	cre_Doc_Template_Mgt

SELECT documents.template_id FROM documents	cre_Doc_Template_Mgt
SELECT documents.template_id , COUNT( * ) FROM documents GROUP BY documents.template_id	cre_Doc_Template_Mgt
SELECT documents.template_id FROM documents GROUP BY documents.template_id HAVING COUNT( * ) > 1	cre_Doc_Template_Mgt

SELECT documents.template_id FROM documents	cre_Doc_Template_Mgt
SELECT templates.template_id FROM templates	cre_Doc_Template_Mgt
SELECT templates.template_id FROM templates WHERE templates.template_id NOT IN (SELECT documents.template_id FROM documents)	cre_Doc_Template_Mgt

SELECT * FROM templates	cre_Doc_Template_Mgt
SELECT COUNT( * ) FROM templates	cre_Doc_Template_Mgt

SELECT templates.template_id FROM templates	cre_Doc_Template_Mgt
SELECT templates.template_id , templates.version_number , templates.template_type_code FROM templates	cre_Doc_Template_Mgt

SELECT templates.template_type_code FROM templates	cre_Doc_Template_Mgt
SELECT DISTINCT templates.template_type_code FROM templates	cre_Doc_Template_Mgt

SELECT templates.template_id FROM templates	cre_Doc_Template_Mgt
SELECT templates.template_id FROM templates WHERE templates.template_type_code = PP OR templates.template_type_code = PPT	cre_Doc_Template_Mgt

SELECT templates.template_type_code FROM templates	cre_Doc_Template_Mgt
SELECT COUNT( * ) FROM templates JOIN CV ON templates.template_type_code = CV	cre_Doc_Template_Mgt

SELECT templates.version_number FROM templates	cre_Doc_Template_Mgt
SELECT * FROM templates WHERE templates.version_number > 5	cre_Doc_Template_Mgt
SELECT templates.template_type_code , templates.template_type_code FROM templates WHERE templates.version_number > 5	cre_Doc_Template_Mgt

SELECT templates.template_type_code FROM templates	cre_Doc_Template_Mgt
SELECT templates.template_type_code , COUNT( * ) FROM templates GROUP BY templates.template_type_code	cre_Doc_Template_Mgt

SELECT templates.template_type_code FROM templates	cre_Doc_Template_Mgt
SELECT templates.template_type_code , COUNT( * ) FROM templates GROUP BY templates.template_type_code	cre_Doc_Template_Mgt
SELECT templates.template_type_code FROM templates GROUP BY templates.template_type_code ORDER BY COUNT( * ) DESC LIMIT 1	cre_Doc_Template_Mgt

SELECT templates.template_type_code FROM templates	cre_Doc_Template_Mgt
SELECT templates.template_type_code , COUNT( * ) FROM templates GROUP BY templates.template_type_code	cre_Doc_Template_Mgt
SELECT templates.template_type_code FROM templates GROUP BY templates.template_type_code HAVING COUNT( * )<3	cre_Doc_Template_Mgt

SELECT templates.version_number FROM templates	cre_Doc_Template_Mgt
SELECT MIN( templates.version_number ) FROM templates	cre_Doc_Template_Mgt
SELECT MIN( templates.version_number ) , templates.template_type_code FROM templates	cre_Doc_Template_Mgt

SELECT templates.template_type_code FROM templates	cre_Doc_Template_Mgt
SELECT templates.template_type_code , documents.document_name FROM documents JOIN templates ON documents.template_id = templates.template_id	cre_Doc_Template_Mgt
SELECT templates.template_type_code FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN Data base ON documents.document_name = Data base	cre_Doc_Template_Mgt

SELECT documents.document_name FROM documents	cre_Doc_Template_Mgt
SELECT documents.document_name , templates.template_type_code FROM documents JOIN templates ON documents.template_id = templates.template_id	cre_Doc_Template_Mgt
SELECT documents.document_name FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN BK ON templates.template_type_code = BK	cre_Doc_Template_Mgt

SELECT templates.template_type_code FROM templates	cre_Doc_Template_Mgt
SELECT documents.document_id , templates.template_type_code FROM documents JOIN templates ON documents.template_id = templates.template_id	cre_Doc_Template_Mgt
SELECT templates.template_type_code , COUNT( * ) FROM documents JOIN templates ON documents.template_id = templates.template_id GROUP BY templates.template_type_code	cre_Doc_Template_Mgt

SELECT templates.template_type_code FROM templates	cre_Doc_Template_Mgt
SELECT templates.template_type_code , COUNT( * ) FROM documents JOIN templates ON documents.template_id = templates.template_id GROUP BY templates.template_type_code	cre_Doc_Template_Mgt
SELECT templates.template_type_code FROM documents JOIN templates ON documents.template_id = templates.template_id GROUP BY templates.template_type_code ORDER BY COUNT( * ) DESC	cre_Doc_Template_Mgt
SELECT templates.template_type_code FROM documents JOIN templates ON documents.template_id = templates.template_id GROUP BY templates.template_type_code ORDER BY COUNT( * ) DESC LIMIT 1	cre_Doc_Template_Mgt

SELECT templates.template_type_code FROM templates	cre_Doc_Template_Mgt
SELECT ref_template_types.template_type_code FROM templates EXCEPT SELECT templates.template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id	cre_Doc_Template_Mgt
SELECT templates.template_type_code FROM templates EXCEPT SELECT templates.template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id	cre_Doc_Template_Mgt

SELECT templates.template_type_code FROM templates	cre_Doc_Template_Mgt
SELECT ref_template_types.template_type_code , ref_template_types.template_type_description FROM ref_template_types	cre_Doc_Template_Mgt

SELECT ref_template_types.template_type_code , ref_template_types.template_type_description FROM ref_template_types	cre_Doc_Template_Mgt
SELECT ref_template_types.template_type_description FROM ref_template_types JOIN AD ON ref_template_types.template_type_code = AD	cre_Doc_Template_Mgt

SELECT templates.template_type_code FROM templates	cre_Doc_Template_Mgt
SELECT ref_template_types.template_type_code , ref_template_types.template_type_description FROM ref_template_types	cre_Doc_Template_Mgt
SELECT ref_template_types.template_type_code FROM ref_template_types JOIN Book ON ref_template_types.template_type_description = Book	cre_Doc_Template_Mgt

SELECT documents.template_id FROM documents	cre_Doc_Template_Mgt
SELECT templates.template_id , templates.template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id	cre_Doc_Template_Mgt
SELECT ref_template_types.template_type_description FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON documents.template_id = templates.template_id	cre_Doc_Template_Mgt
SELECT DISTINCT ref_template_types.template_type_description FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON ref_template_types.template_type_code = documents.template_id	cre_Doc_Template_Mgt

SELECT templates.template_id FROM templates	cre_Doc_Template_Mgt
SELECT templates.template_id , ref_template_types.template_type_description FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code	cre_Doc_Template_Mgt
SELECT templates.template_id FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code JOIN Presentation ON ref_template_types.template_type_description = Presentation	cre_Doc_Template_Mgt

SELECT * FROM paragraphs	cre_Doc_Template_Mgt
SELECT COUNT( * ) FROM paragraphs	cre_Doc_Template_Mgt

SELECT paragraphs.paragraph_id FROM paragraphs	cre_Doc_Template_Mgt
SELECT paragraphs.paragraph_id , documents.document_name FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id	cre_Doc_Template_Mgt
SELECT paragraphs.paragraph_id FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id JOIN Summer Show ON documents.document_name = Summer Show	cre_Doc_Template_Mgt
SELECT COUNT( * ) FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id JOIN Summer Show ON documents.document_name = Summer Show	cre_Doc_Template_Mgt

SELECT paragraphs.paragraph_text FROM paragraphs	cre_Doc_Template_Mgt
SELECT paragraphs.paragraph_text , paragraphs.other_details FROM paragraphs	cre_Doc_Template_Mgt
SELECT paragraphs.other_details FROM paragraphs WHERE paragraphs.other_details IN (SELECT paragraphs.other_details FROM paragraphs JOIN Korea ON paragraphs.paragraph_text = Korea)	cre_Doc_Template_Mgt

SELECT paragraphs.paragraph_id , paragraphs.paragraph_text FROM paragraphs	cre_Doc_Template_Mgt
SELECT paragraphs.paragraph_id , paragraphs.paragraph_text , documents.document_name FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id	cre_Doc_Template_Mgt
SELECT paragraphs.paragraph_id , paragraphs.paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id JOIN Welcome to NY ON documents.document_name = Welcome to NY	cre_Doc_Template_Mgt

SELECT paragraphs.paragraph_text FROM paragraphs	cre_Doc_Template_Mgt
SELECT documents.document_name , paragraphs.paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id	cre_Doc_Template_Mgt
SELECT paragraphs.paragraph_text FROM paragraphs JOIN documents ON paragraphs.document_id = documents.document_id JOIN Customer reviews ON documents.document_name = Customer reviews	cre_Doc_Template_Mgt

SELECT paragraphs.document_id FROM paragraphs	cre_Doc_Template_Mgt
SELECT paragraphs.document_id , COUNT( * ) FROM paragraphs GROUP BY paragraphs.document_id	cre_Doc_Template_Mgt
SELECT paragraphs.document_id , COUNT( * ) FROM paragraphs GROUP BY paragraphs.document_id	cre_Doc_Template_Mgt

SELECT documents.document_id , documents.document_name FROM documents	cre_Doc_Template_Mgt
SELECT documents.document_id , documents.document_name , COUNT( * ) FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id	cre_Doc_Template_Mgt

SELECT paragraphs.document_id FROM paragraphs	cre_Doc_Template_Mgt
SELECT paragraphs.document_id , COUNT( * ) FROM paragraphs GROUP BY paragraphs.document_id	cre_Doc_Template_Mgt
SELECT paragraphs.document_id FROM paragraphs GROUP BY paragraphs.document_id HAVING COUNT( * ) >= 2	cre_Doc_Template_Mgt

SELECT documents.document_id , documents.document_name FROM documents	cre_Doc_Template_Mgt
SELECT documents.document_id , documents.document_name , paragraphs.paragraph_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id	cre_Doc_Template_Mgt
SELECT documents.document_id , paragraphs.paragraph_id , documents.document_name , COUNT( * ) FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id	cre_Doc_Template_Mgt
SELECT documents.document_id , documents.document_name , MAX( paragraphs.paragraph_id ) , paragraphs.document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY paragraphs.document_id ORDER BY COUNT( * ) DESC LIMIT 1	cre_Doc_Template_Mgt

SELECT paragraphs.document_id FROM paragraphs	cre_Doc_Template_Mgt
SELECT paragraphs.document_id , COUNT( * ) FROM paragraphs GROUP BY paragraphs.document_id	cre_Doc_Template_Mgt
SELECT paragraphs.document_id FROM paragraphs GROUP BY paragraphs.document_id ORDER BY COUNT( * ) ASC	cre_Doc_Template_Mgt
SELECT paragraphs.document_id FROM paragraphs GROUP BY paragraphs.document_id ORDER BY COUNT( * ) ASC LIMIT 1	cre_Doc_Template_Mgt

SELECT paragraphs.document_id FROM paragraphs	cre_Doc_Template_Mgt
SELECT paragraphs.document_id , COUNT( * ) FROM paragraphs GROUP BY paragraphs.document_id	cre_Doc_Template_Mgt
SELECT paragraphs.document_id FROM paragraphs GROUP BY paragraphs.document_id HAVING COUNT( * ) BETWEEN 1 and 2	cre_Doc_Template_Mgt

SELECT * FROM singer	concert_singer
SELECT COUNT( * ) FROM singer	concert_singer

SELECT singer.name FROM singer	concert_singer
SELECT singer.name , singer.country , singer.age FROM singer	concert_singer
SELECT singer.name , singer.country , singer.age FROM singer ORDER BY singer.age DESC	concert_singer

SELECT singer.age FROM singer	concert_singer
SELECT singer.age FROM singer JOIN France ON singer.country = France	concert_singer
SELECT AVG( singer.age ) , MIN( singer.age ) , MAX( singer.age ) FROM singer JOIN France ON singer.country = France	concert_singer

SELECT singer.song_name FROM singer	concert_singer
SELECT singer.song_name , singer.song_release_year FROM singer	concert_singer
SELECT singer.song_name , singer.song_release_year FROM singer ORDER BY singer.age ASC	concert_singer
SELECT singer.song_name , singer.song_release_year FROM singer ORDER BY singer.age DESC LIMIT 1	concert_singer

SELECT singer.country FROM singer	concert_singer
SELECT singer.country FROM singer WHERE singer.age > 20	concert_singer
SELECT DISTINCT singer.country FROM singer WHERE singer.age > 20	concert_singer

SELECT singer.country FROM singer	concert_singer
SELECT singer.country , COUNT( * ) FROM singer GROUP BY singer.country	concert_singer

SELECT AVG( singer.age ) FROM singer	concert_singer
SELECT singer.song_name FROM singer WHERE singer.age > (SELECT AVG( singer.age ) FROM singer)	concert_singer

SELECT stadium.name FROM stadium	concert_singer
SELECT stadium.name FROM stadium WHERE stadium.capacity BETWEEN 5000 and 10000	concert_singer
SELECT stadium.name , stadium.location FROM stadium WHERE stadium.capacity BETWEEN 5000 and 10000	concert_singer

SELECT stadium.capacity FROM stadium	concert_singer
SELECT AVG( stadium.capacity ) FROM stadium	concert_singer
SELECT AVG( stadium.capacity ) , MAX( stadium.highest ) FROM stadium	concert_singer

SELECT stadium.name , stadium.capacity FROM stadium	concert_singer
SELECT stadium.name , stadium.capacity FROM stadium ORDER BY stadium.average DESC	concert_singer
SELECT stadium.name , stadium.capacity FROM stadium ORDER BY stadium.highest DESC LIMIT 1	concert_singer

SELECT * FROM concert WHERE concert.year = 2014	concert_singer
SELECT * FROM concert WHERE concert.year = 2014 OR concert.year = 2015	concert_singer
SELECT COUNT( * ) FROM concert WHERE concert.year = 2014 OR concert.year = 2015	concert_singer

SELECT stadium.name FROM stadium	concert_singer
SELECT stadium.name , COUNT( * ) FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.stadium_id	concert_singer

SELECT stadium.name , stadium.capacity FROM stadium	concert_singer
SELECT stadium.name , stadium.capacity FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE concert.year >= 2014 GROUP BY concert.stadium_id ORDER BY COUNT( * ) DESC	concert_singer
SELECT stadium.name , stadium.capacity FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year >= 2014 GROUP BY concert.stadium_id ORDER BY COUNT( * ) DESC LIMIT 1	concert_singer

SELECT concert.year FROM concert	concert_singer
SELECT concert.year FROM concert GROUP BY concert.year ORDER BY COUNT( * ) DESC	concert_singer
SELECT concert.year FROM concert GROUP BY concert.year ORDER BY COUNT( * ) DESC LIMIT 1	concert_singer

SELECT concert.stadium_id FROM concert	concert_singer
SELECT stadium.name FROM stadium WHERE stadium.stadium_id NOT IN (SELECT concert.stadium_id FROM concert)	concert_singer

SELECT singer.country FROM singer	concert_singer
SELECT singer.country FROM singer WHERE singer.age > 40	concert_singer
SELECT singer.country FROM singer WHERE singer.age<30	concert_singer
SELECT singer.country FROM singer WHERE singer.age > 40 INTERSECT SELECT singer.country FROM singer WHERE singer.age<30	concert_singer

SELECT stadium.name FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year = 2014	concert_singer
SELECT stadium.name FROM stadium EXCEPT SELECT stadium.name FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year = 2014	concert_singer

SELECT concert.concert_name , concert.theme FROM concert	concert_singer
SELECT concert.concert_name , concert.theme , COUNT( * ) FROM concert GROUP BY concert.concert_id	concert_singer

SELECT singer.name FROM singer	concert_singer
SELECT singer.name , COUNT( * ) FROM singer_in_concert JOIN concert ON singer_in_concert.concert_id = concert.concert_id JOIN singer ON singer_in_concert.singer_id = singer.singer_id GROUP BY singer_in_concert.singer_id	concert_singer

SELECT singer.name FROM singer	concert_singer
SELECT singer.name FROM singer_in_concert JOIN concert ON singer_in_concert.concert_id = concert.concert_id JOIN singer ON singer_in_concert.singer_id = singer.singer_id WHERE concert.year = 2014	concert_singer

SELECT singer.name FROM singer	concert_singer
SELECT singer.name FROM singer WHERE singer.name IN (SELECT names for those having a song having 'Hey FROM singer_in_concert INTERSECT SELECT singer.name FROM singer_in_concert)	concert_singer
SELECT singer.name , singer.country FROM singer WHERE singer.song_name != Hey	concert_singer

SELECT stadium.name , stadium.location FROM stadium	concert_singer
SELECT stadium.name , stadium.location FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year = 2014	concert_singer
SELECT stadium.name , stadium.location FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE concert.year = 2014 INTERSECT SELECT stadium.name , stadium.location FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE concert.year = 2015	concert_singer

SELECT singer.name , singer.birth_year FROM singer	singer
SELECT singer.name , singer.birth_year FROM singer WHERE singer.birth_year = 1948	singer
SELECT singer.name FROM singer WHERE singer.birth_year = 1948 OR singer.birth_year = 1949	singer

SELECT singer.name , singer.net_worth_millions FROM singer	singer
SELECT singer.name , singer.net_worth_millions FROM singer ORDER BY singer.net_worth_millions DESC	singer
SELECT singer.name FROM singer ORDER BY singer.net_worth_millions DESC LIMIT 1	singer

SELECT singer.name , singer.citizenship FROM singer	singer
SELECT COUNT( DISTINCT singer.citizenship ) FROM singer	singer
SELECT singer.citizenship FROM singer GROUP BY singer.citizenship ORDER BY COUNT( * ) DESC LIMIT 1	singer
SELECT singer.citizenship FROM singer GROUP BY singer.citizenship ORDER BY COUNT( * ) DESC LIMIT 1	singer

SELECT singer.name , song.title FROM singer JOIN song ON singer.singer_id = song.singer_id	singer
SELECT singer.name , song.title FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000	singer
SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000	singer

SELECT singer.name , COUNT( * ) FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.singer_id	singer
SELECT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name HAVING COUNT( * ) > 1	singer

SELECT song.title , song.sales FROM song	singer
SELECT singer.name , SUM( song.sales ) FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name	singer

SELECT DISTINCT song.singer_id FROM song	singer
SELECT singer.name FROM singer WHERE singer.singer_id NOT IN (SELECT song.singer_id FROM song)	singer

SELECT * FROM employee WHERE employee.age<30	employee_hire_evaluation
SELECT employee.city FROM employee WHERE employee.age<30	employee_hire_evaluation
SELECT employee.city FROM employee WHERE employee.age<30 GROUP BY employee.city HAVING COUNT( * ) > 1	employee_hire_evaluation

SELECT * FROM shop	employee_hire_evaluation
SELECT SUM( shop.number_products ) FROM shop	employee_hire_evaluation
SELECT shop.name FROM shop ORDER BY shop.number_products DESC LIMIT 1	employee_hire_evaluation
SELECT shop.manager_name , shop.district FROM shop ORDER BY shop.number_products DESC LIMIT 1	employee_hire_evaluation

SELECT AVG( shop.number_products ) FROM shop	employee_hire_evaluation
SELECT MIN( shop.number_products ) , MAX( shop.number_products ) FROM shop	employee_hire_evaluation

SELECT shop.name , shop.number_products FROM shop	employee_hire_evaluation
SELECT AVG( shop.number_products ) FROM shop	employee_hire_evaluation
SELECT shop.name FROM shop WHERE shop.number_products<(SELECT AVG( shop.number_products ) FROM shop)	employee_hire_evaluation
SELECT shop.name FROM shop WHERE shop.number_products > (SELECT AVG( shop.number_products ) FROM shop)	employee_hire_evaluation

SELECT COUNT( * ) FROM evaluation	employee_hire_evaluation
SELECT evaluation.year_awarded FROM evaluation	employee_hire_evaluation
SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY employee.employee_id ORDER BY COUNT( * ) DESC LIMIT 1	employee_hire_evaluation

SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id WHERE evaluation.year_awarded = (SELECT MAX( evaluation.year_awarded ) FROM evaluation)	employee_hire_evaluation
SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY employee.employee_id ORDER BY COUNT( * ) DESC LIMIT 1	employee_hire_evaluation
SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id ORDER BY evaluation.bonus DESC LIMIT 1	employee_hire_evaluation

SELECT COUNT( DISTINCT employee.name ) , employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY employee.employee_id	employee_hire_evaluation
SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id WHERE evaluation.year_awarded >= (SELECT evaluation.year_awarded FROM evaluation)	employee_hire_evaluation
SELECT employee.name FROM employee WHERE employee.employee_id NOT IN (SELECT evaluation.employee_id FROM evaluation)	employee_hire_evaluation

SELECT COUNT( * ) FROM hiring	employee_hire_evaluation
SELECT shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id	employee_hire_evaluation
SELECT shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY hiring.shop_id ORDER BY COUNT( * ) DESC LIMIT 1	employee_hire_evaluation

SELECT * FROM hiring	employee_hire_evaluation
SELECT shop.name FROM shop WHERE shop.shop_id NOT IN (SELECT hiring.shop_id FROM hiring)	employee_hire_evaluation

SELECT COUNT( * ) FROM hiring	employee_hire_evaluation
SELECT shop.name , COUNT( * ) FROM hiring JOIN shop ON hiring.shop_id = shop.shop_id GROUP BY hiring.shop_id	employee_hire_evaluation

SELECT * FROM visit	museum_visit
SELECT * FROM visitor JOIN visit ON visitor.id = visit.visitor_id ORDER BY visitor.level_of_membership DESC	museum_visit
SELECT visitor.name FROM visitor JOIN visit ON visitor.id = visit.visitor_id ORDER BY visitor.level_of_membership DESC	museum_visit
SELECT visitor.name FROM visitor JOIN visit ON visitor.id = visit.visitor_id INTERSECT SELECT visitor.name FROM visitor WHERE visitor.level_of_membership >= 4	museum_visit

SELECT COUNT( * ) FROM visit JOIN visitor ON visit.visitor_id = visitor.id WHERE visitor.level_of_membership > 4	museum_visit
SELECT visitor.name , visitor.level_of_membership FROM visitor JOIN visit ON visitor.id = visit.visitor_id WHERE visitor.level_of_membership > 4	museum_visit
SELECT visitor.name , visitor.level_of_membership FROM visitor JOIN visit ON visitor.id = visit.visitor_id WHERE visitor.level_of_membership > 4 ORDER BY visitor.age DESC	museum_visit

SELECT COUNT( * ) FROM museum	museum_visit
SELECT AVG( museum.num_of_staff ) FROM museum	museum_visit
SELECT museum.name FROM museum ORDER BY museum.num_of_staff DESC LIMIT 1	museum_visit
SELECT museum.museum_id FROM museum ORDER BY museum.num_of_staff DESC LIMIT 1	museum_visit

SELECT museum.name FROM museum WHERE museum.open_year<2010	museum_visit
SELECT museum.name FROM museum WHERE museum.open_year > 2010	museum_visit
SELECT MIN( museum.num_of_staff ) FROM museum WHERE museum.open_year > 2010	museum_visit
SELECT museum.name FROM museum WHERE museum.num_of_staff > (SELECT MIN( museum.num_of_staff ) FROM museum WHERE museum.open_year > 2010)	museum_visit

SELECT visitor.name FROM visit JOIN visitor ON visit.visitor_id = visitor.id	museum_visit
SELECT visitor.name FROM visit JOIN visitor ON visit.visitor_id = visitor.id GROUP BY visitor.name HAVING COUNT( * ) > 1	museum_visit
SELECT visitor.id , visitor.name , visitor.age FROM visit JOIN visitor ON visit.visitor_id = visitor.id GROUP BY visitor.id HAVING COUNT( * ) > 1	museum_visit

SELECT SUM( visit.total_spent ) FROM visit	museum_visit
SELECT visitor.name FROM visit JOIN visitor ON visit.visitor_id = visitor.id ORDER BY visit.total_spent DESC LIMIT 1	museum_visit
SELECT visitor.name , visitor.level_of_membership FROM visitor JOIN visit ON visitor.id = visit.visitor_id ORDER BY visit.total_spent DESC LIMIT 1	museum_visit

SELECT museum.museum_id , museum.name FROM museum	museum_visit
SELECT museum.museum_id , museum.name , SUM( visit.num_of_ticket ) FROM visit JOIN museum ON visit.museum_id = museum.museum_id GROUP BY museum.museum_id	museum_visit
SELECT museum.museum_id , museum.name FROM visit JOIN museum ON visit.museum_id = museum.museum_id GROUP BY museum.museum_id ORDER BY COUNT( * ) DESC LIMIT 1	museum_visit

SELECT COUNT( * ) FROM museum	museum_visit
SELECT COUNT( * ) FROM museum WHERE museum.museum_id NOT IN (SELECT visit.museum_id FROM visit)	museum_visit
SELECT museum.name FROM museum WHERE museum.museum_id NOT IN (SELECT visit.museum_id FROM visit)	museum_visit

SELECT SUM( visit.num_of_ticket ) FROM visit	museum_visit
SELECT visit.visitor_id FROM visit GROUP BY visit.num_of_ticket ORDER BY SUM( visit.num_of_ticket ) DESC LIMIT 1	museum_visit
SELECT visitor.name , visitor.age FROM visit JOIN visitor ON visit.visitor_id = visitor.id ORDER BY visit.num_of_ticket DESC LIMIT 1	museum_visit

SELECT SUM( visit.total_spent ) FROM visit	museum_visit
SELECT MAX( visit.total_spent ) FROM visit	museum_visit
SELECT MIN( visit.num_of_ticket ) , AVG( visit.num_of_ticket ) , MAX( visit.total_spent ) FROM visit	museum_visit

SELECT visitor.level_of_membership FROM visitor ORDER BY visitor.level_of_membership ASC LIMIT 1	museum_visit
SELECT COUNT( * ) FROM visitor JOIN visit ON visitor.id = visit.visitor_id WHERE visitor.level_of_membership = 1	museum_visit
SELECT visit.total_spent FROM visitor JOIN visit ON visitor.id = visit.visitor_id WHERE visitor.level_of_membership = 1	museum_visit
SELECT SUM( visit.total_spent ) FROM visit JOIN visitor ON visit.visitor_id = visitor.id WHERE visitor.level_of_membership = 1	museum_visit

SELECT museum.name FROM museum WHERE museum.open_year<2009	museum_visit
SELECT museum.name FROM museum WHERE museum.open_year > 2011	museum_visit
SELECT visitor.name FROM visit JOIN museum ON visit.museum_id = museum.museum_id JOIN visitor ON visit.visitor_id = visitor.id WHERE museum.open_year<2009 OR museum.open_year > 2011 INTERSECT SELECT visitor.name FROM museum JOIN visit ON museum.museum_id = visit.museum_id JOIN visitor ON visit.visitor_id = visitor.id WHERE museum.open_year > 2011	museum_visit

SELECT museum.name FROM museum WHERE museum.open_year > 2010	museum_visit
SELECT COUNT( * ) FROM visit JOIN museum ON visit.museum_id = museum.museum_id WHERE museum.open_year > 2010	museum_visit
SELECT COUNT( * ) FROM visitor WHERE museum.museum_id NOT IN (SELECT visit.museum_id FROM visit WHERE museum.open_year > 2010)	museum_visit

SELECT COUNT( * ) FROM highschooler	network_1
SELECT COUNT( * ) FROM highschooler WHERE highschooler.grade = 11 OR highschooler.grade = 12	network_1
SELECT COUNT( * ) FROM highschooler WHERE highschooler.grade = 9 OR highschooler.grade = 10	network_1

SELECT COUNT( DISTINCT highschooler.grade ) FROM highschooler	network_1
SELECT DISTINCT highschooler.grade FROM highschooler	network_1
SELECT highschooler.grade FROM highschooler GROUP BY highschooler.grade ORDER BY COUNT( * ) ASC LIMIT 1	network_1
SELECT highschooler.grade FROM highschooler GROUP BY highschooler.grade ORDER BY COUNT( * ) DESC LIMIT 1	network_1

SELECT COUNT( * ) FROM highschooler	network_1
SELECT COUNT( * ) , highschooler.grade FROM highschooler GROUP BY highschooler.grade	network_1
SELECT highschooler.grade FROM highschooler GROUP BY highschooler.grade HAVING COUNT( * ) >= 10	network_1
SELECT highschooler.grade FROM highschooler GROUP BY highschooler.grade HAVING COUNT( * ) >= 4	network_1

SELECT highschooler.name FROM highschooler	network_1
SELECT * , highschooler.name FROM highschooler JOIN friend ON highschooler.id = friend.student_id	network_1
SELECT highschooler.name , COUNT( * ) FROM friend JOIN highschooler ON friend.student_id = highschooler.id GROUP BY friend.student_id	network_1

SELECT highschooler.name FROM highschooler	network_1
SELECT highschooler.name , COUNT( * ) FROM friend JOIN highschooler ON friend.student_id = highschooler.id GROUP BY friend.student_id	network_1
SELECT highschooler.name FROM friend JOIN highschooler ON friend.student_id = highschooler.id GROUP BY friend.student_id ORDER BY COUNT( * ) ASC LIMIT 1	network_1
SELECT highschooler.name FROM friend JOIN highschooler ON friend.student_id = highschooler.id GROUP BY friend.student_id ORDER BY COUNT( * ) DESC LIMIT 1	network_1

5 > 5	network_1
SELECT COUNT( * ) FROM highschooler JOIN friend ON highschooler.id = friend.student_id GROUP BY friend.student_id HAVING COUNT( * ) >= 3	network_1
SELECT highschooler.name FROM highschooler JOIN friend ON highschooler.id = friend.student_id GROUP BY friend.student_id HAVING COUNT( * ) > 3	network_1

SELECT * FROM highschooler JOIN Kyle ON highschooler.name = Kyle	network_1
SELECT COUNT( * ) FROM friend JOIN highschooler ON friend.student_id = highschooler.id JOIN Kyle ON highschooler.name = Kyle	network_1
SELECT friend.friend_id FROM friend JOIN highschooler ON friend.student_id = highschooler.id JOIN Kyle ON highschooler.name = Kyle	network_1

SELECT * FROM highschooler JOIN Kyle ON highschooler.name = Kyle	network_1
SELECT likes.liked_id FROM likes JOIN highschooler ON likes.student_id = highschooler.id JOIN Kyle ON highschooler.name = Kyle	network_1
SELECT friend.friend_id FROM friend JOIN highschooler ON friend.friend_id = highschooler.id JOIN Kyle ON highschooler.name = Kyle	network_1
SELECT COUNT( * ) FROM friend JOIN highschooler ON friend.student_id = highschooler.id JOIN Kyle ON highschooler.name = Kyle	network_1

SELECT highschooler.id FROM highschooler	network_1
SELECT COUNT( * ) , friend.student_id FROM friend GROUP BY friend.student_id	network_1
SELECT friend.student_id FROM friend GROUP BY friend.student_id HAVING COUNT( * ) >= 1	network_1
SELECT highschooler.id FROM highschooler WHERE highschooler.id NOT IN (SELECT friend.student_id FROM friend GROUP BY friend.student_id HAVING COUNT( * ) >= 1)	network_1

SELECT highschooler.name FROM highschooler JOIN shcool ON highschooler.grade = shcool	network_1
SELECT highschooler.name FROM friend JOIN highschooler ON friend.student_id = highschooler.id GROUP BY friend.student_id HAVING COUNT( * ) >= 5	network_1
SELECT highschooler.name FROM friend JOIN highschooler ON friend.student_id = highschooler.id GROUP BY friend.student_id HAVING COUNT( * ) >= 1	network_1
SELECT highschooler.name FROM friend JOIN highschooler ON friend.student_id = highschooler.id GROUP BY friend.student_id HAVING COUNT( * ) >= 0	network_1

SELECT DISTINCT friend.student_id FROM friend	network_1
friend , friend	network_1
SELECT highschooler.id FROM likes JOIN highschooler ON likes.student_id = highschooler.id WHERE highschooler.id IN (SELECT likes.liked_id FROM friend) AND highschooler.id IN (SELECT likes.student_id FROM friend)	network_1
SELECT highschooler.id FROM highschooler WHERE highschooler.id IN (SELECT likes.student_id FROM likes)	network_1

SELECT COUNT( * ) FROM highschooler WHERE highschooler.id IN (SELECT likes.student_id FROM likes)	network_1
SELECT highschooler.name FROM highschooler WHERE highschooler.id IN (SELECT likes.student_id FROM likes)	network_1
SELECT COUNT( * ) FROM highschooler WHERE highschooler.id IN (SELECT friend.student_id FROM likes)	network_1
SELECT highschooler.name FROM highschooler WHERE highschooler.id IN (SELECT friend.student_id FROM likes)	network_1

SELECT highschooler.name FROM highschooler WHERE highschooler.id NOT IN (SELECT likes.student_id FROM likes)	network_1
SELECT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.liked_id	network_1
SELECT highschooler.name , COUNT( * ) FROM highschooler JOIN likes ON highschooler.id = likes.liked_id GROUP BY likes.student_id	network_1

SELECT COUNT( * ) FROM highschooler JOIN likes ON highschooler.id = likes.liked_id	network_1
SELECT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.liked_id	network_1
SELECT COUNT( * ) FROM likes JOIN highschooler ON likes.liked_id = highschooler.id GROUP BY likes.student_id ORDER BY COUNT( * ) DESC LIMIT 1	network_1
SELECT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY likes.student_id ORDER BY COUNT( * ) DESC LIMIT 1	network_1

SELECT highschooler.name FROM highschooler	network_1
SELECT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY likes.student_id	network_1
SELECT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY likes.student_id HAVING COUNT( * ) >= 2	network_1

SELECT highschooler.name FROM highschooler JOIN friend ON highschooler.id = friend.student_id	network_1
SELECT highschooler.name FROM friend JOIN highschooler ON friend.student_id = highschooler.id GROUP BY friend.student_id HAVING COUNT( * ) >= 2	network_1
SELECT highschooler.name , highschooler.grade FROM friend JOIN highschooler ON friend.student_id = highschooler.id GROUP BY friend.student_id HAVING COUNT( * ) >= 2	network_1
SELECT highschooler.name FROM friend JOIN highschooler ON friend.student_id = highschooler.id WHERE highschooler.grade > 5 GROUP BY friend.student_id HAVING COUNT( * ) >= 2	network_1

SELECT highschooler.grade FROM highschooler JOIN Kyle ON highschooler.name = Kyle	network_1
SELECT COUNT( * ) FROM highschooler JOIN likes ON highschooler.id = likes.student_id JOIN Kyle ON highschooler.name = Kyle	network_1
SELECT DISTINCT likes.liked_id FROM highschooler JOIN likes ON highschooler.id = likes.student_id JOIN Kyle ON highschooler.name = Kyle	network_1
SELECT COUNT( DISTINCT likes.liked_id ) FROM likes JOIN highschooler ON likes.student_id = highschooler.id JOIN Kyle ON highschooler.name = Kyle	network_1

SELECT highschooler.id , highschooler.grade FROM highschooler	network_1
SELECT AVG( highschooler.grade ) FROM highschooler	network_1
SELECT AVG( highschooler.grade ) FROM highschooler WHERE highschooler.id NOT IN (SELECT friend.student_id FROM friend)	network_1
SELECT AVG( highschooler.grade ) FROM highschooler WHERE highschooler.id IN (SELECT friend.student_id FROM friend)	network_1

SELECT * FROM teacher	course_teach
SELECT COUNT( * ) FROM teacher	course_teach

SELECT teacher.name FROM teacher	course_teach
SELECT teacher.name FROM teacher ORDER BY teacher.age ASC	course_teach

SELECT teacher.age FROM teacher	course_teach
SELECT teacher.age , teacher.hometown FROM teacher	course_teach

SELECT teacher.hometown FROM teacher	course_teach
SELECT * FROM teacher WHERE teacher.hometown != Little Lever Urban District	course_teach
SELECT teacher.name FROM teacher WHERE teacher.hometown != Little Lever Urban District	course_teach

SELECT teacher.age FROM teacher	course_teach
SELECT * FROM teacher WHERE teacher.age = 32	course_teach
SELECT * FROM teacher WHERE teacher.age = 32 OR teacher.age = 33	course_teach
SELECT teacher.name FROM teacher WHERE teacher.age = 32 OR teacher.age = 33	course_teach

SELECT * FROM teacher ORDER BY teacher.age ASC	course_teach
SELECT * FROM teacher ORDER BY teacher.age ASC LIMIT 1	course_teach
SELECT teacher.hometown FROM teacher ORDER BY teacher.age ASC LIMIT 1	course_teach

SELECT teacher.hometown FROM teacher	course_teach
SELECT * FROM teacher ORDER BY teacher.hometown ASC	course_teach
SELECT teacher.hometown , COUNT( * ) FROM teacher GROUP BY teacher.hometown	course_teach

SELECT COUNT( * ) FROM teacher	course_teach
SELECT teacher.hometown , COUNT( * ) FROM teacher GROUP BY teacher.hometown	course_teach
SELECT teacher.hometown FROM teacher GROUP BY teacher.hometown ORDER BY COUNT( * ) DESC LIMIT 1	course_teach

SELECT COUNT( * ) FROM teacher	course_teach
SELECT teacher.hometown , COUNT( * ) FROM teacher GROUP BY teacher.hometown	course_teach
SELECT teacher.hometown FROM teacher GROUP BY teacher.hometown HAVING COUNT( * ) >= 2	course_teach

SELECT * FROM course_arrange	course_teach
SELECT teacher.name FROM course JOIN course_arrange ON course.course_id = course_arrange.course_id JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id	course_teach

SELECT * FROM course_arrange	course_teach
SELECT teacher.name , course.course FROM course JOIN course_arrange ON course.course_id = course_arrange.course_id JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id	course_teach
SELECT teacher.name FROM course JOIN course_arrange ON course.course_id = course_arrange.course_id JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id ORDER BY teacher.name ASC	course_teach

SELECT * FROM course_arrange	course_teach
SELECT teacher.name , course.course FROM course JOIN course_arrange ON course.course_id = course_arrange.course_id JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id	course_teach
SELECT teacher.name FROM course JOIN course_arrange ON course.course_id = course_arrange.course_id JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id JOIN math ON course.course = math	course_teach

SELECT teacher.name FROM teacher	course_teach
SELECT teacher.name , COUNT( * ) FROM course JOIN course_arrange ON course.course_id = course_arrange.course_id JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id GROUP BY teacher.teacher_id	course_teach

SELECT teacher.name FROM teacher	course_teach
SELECT teacher.name , COUNT( * ) FROM course JOIN course_arrange ON course.course_id = course_arrange.course_id JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id GROUP BY teacher.teacher_id	course_teach
SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.teacher_id HAVING COUNT( * ) >= 2	course_teach

SELECT * FROM other_available_features	real_estate_properties
SELECT COUNT( * ) FROM other_available_features	real_estate_properties

SELECT * FROM other_available_features JOIN AirCon ON other_available_features.feature_name = AirCon	real_estate_properties
SELECT ref_feature_types.feature_type_name FROM other_available_features JOIN ref_feature_types ON other_available_features.feature_type_code = ref_feature_types.feature_type_code JOIN AirCon ON other_available_features.feature_name = AirCon	real_estate_properties

SELECT ref_property_types.property_type_description FROM ref_property_types	real_estate_properties
SELECT ref_property_types.property_type_description , properties.property_type_code FROM ref_property_types JOIN properties ON ref_property_types.property_type_code = properties.property_type_code GROUP BY properties.property_type_code	real_estate_properties

SELECT area_code_state.area_code , area_code_state.state FROM area_code_state	voter_1
SELECT COUNT( * ) FROM area_code_state	voter_1

SELECT * FROM contestants	voter_1
SELECT contestants.contestant_name FROM contestants	voter_1
SELECT contestants.contestant_name , contestants.contestant_number FROM contestants	voter_1
SELECT contestants.contestant_name , contestants.contestant_number FROM contestants ORDER BY contestants.contestant_name DESC	voter_1

SELECT * FROM votes	voter_1
SELECT * , votes.vote_id FROM votes	voter_1
SELECT votes.phone_number , votes.vote_id FROM votes	voter_1

SELECT area_code_state.area_code FROM area_code_state	voter_1
SELECT MAX( area_code_state.area_code ) FROM area_code_state	voter_1
SELECT MIN( area_code_state.area_code ) FROM area_code_state	voter_1
SELECT MAX( area_code_state.area_code ) , MIN( area_code_state.area_code ) FROM area_code_state	voter_1

SELECT * FROM votes	voter_1
SELECT * FROM votes JOIN CA ON votes.state = CA	voter_1
SELECT votes.created FROM votes JOIN CA ON votes.state = CA ORDER BY votes.created DESC LIMIT 1	voter_1

SELECT * FROM contestants	voter_1
SELECT contestants.contestant_name FROM contestants	voter_1
SELECT contestants.contestant_name FROM contestants WHERE contestants.contestant_name != Jessie Alloway	voter_1

SELECT * FROM votes	voter_1
SELECT votes.state FROM votes	voter_1
SELECT DISTINCT votes.state , votes.created FROM votes	voter_1

SELECT * FROM contestants	voter_1
SELECT * FROM votes	voter_1
SELECT * FROM contestants JOIN votes ON contestants.contestant_number = votes.contestant_number GROUP BY contestants.contestant_number HAVING COUNT( * ) >= 2	voter_1
SELECT contestants.contestant_number , contestants.contestant_name FROM contestants JOIN votes ON contestants.contestant_number = votes.contestant_number GROUP BY contestants.contestant_number HAVING COUNT( * ) >= 2	voter_1

SELECT * FROM contestants	voter_1
SELECT * FROM votes	voter_1
SELECT contestants.contestant_name FROM contestants JOIN votes ON contestants.contestant_number = votes.contestant_number GROUP BY votes.contestant_number ORDER BY COUNT( * ) ASC LIMIT 1	voter_1
SELECT contestants.contestant_number , contestants.contestant_name FROM contestants JOIN votes ON contestants.contestant_number = votes.contestant_number GROUP BY contestants.contestant_number ORDER BY COUNT( * ) ASC LIMIT 1	voter_1

SELECT * FROM votes	voter_1
SELECT * FROM votes WHERE votes.state = NY OR votes.state = CA	voter_1
SELECT COUNT( * ) FROM votes WHERE votes.state = NY OR votes.state = CA	voter_1

SELECT * FROM contestants	voter_1
SELECT * FROM contestants WHERE contestants.contestant_number NOT IN (SELECT votes.contestant_number FROM votes)	voter_1
SELECT COUNT( * ) FROM contestants WHERE contestants.contestant_number NOT IN (SELECT votes.contestant_number FROM votes)	voter_1

SELECT area_code_state.area_code , area_code_state.state FROM area_code_state	voter_1
SELECT * FROM votes JOIN area_code_state ON votes.state = area_code_state.state	voter_1
SELECT area_code_state.area_code , COUNT( * ) FROM area_code_state JOIN votes ON area_code_state.state = votes.state GROUP BY area_code_state.area_code	voter_1
SELECT area_code_state.area_code FROM area_code_state JOIN votes ON area_code_state.state = votes.state GROUP BY votes.state ORDER BY COUNT( * ) DESC LIMIT 1	voter_1

SELECT * FROM votes	voter_1
SELECT * FROM contestants JOIN votes ON contestants.contestant_number = votes.contestant_number JOIN Tabatha Gehling ON contestants.contestant_name = Tabatha Gehling	voter_1
SELECT votes.created , votes.state , votes.phone_number FROM contestants JOIN votes ON contestants.contestant_number = votes.contestant_number JOIN Tabatha Gehling ON contestants.contestant_name = Tabatha Gehling	voter_1

SELECT area_code_state.area_code FROM area_code_state	voter_1
SELECT area_code_state.area_code FROM area_code_state JOIN votes ON area_code_state.state = votes.state JOIN contestants ON contestants.contestant_number = votes.contestant_number JOIN Tabatha Gehling ON contestants.contestant_name = Tabatha Gehling	voter_1
SELECT area_code_state.area_code FROM area_code_state JOIN votes ON area_code_state.state = votes.state JOIN contestants ON votes.contestant_number = contestants.contestant_number JOIN Tabatha Gehling ON contestants.contestant_name = Tabatha Gehling INTERSECT SELECT area_code_state.area_code FROM area_code_state JOIN votes ON area_code_state.state = votes.state JOIN contestants ON votes.contestant_number = contestants.contestant_number JOIN Kelly Clauss ON contestants.contestant_name = Kelly Clauss	voter_1

SELECT departments.department_description FROM degree_programs JOIN departments ON degree_programs.department_id = departments.department_id GROUP BY departments.department_id ORDER BY COUNT( * ) DESC LIMIT 1	student_transcripts_tracking
SELECT departments.department_name , departments.department_id FROM degree_programs JOIN departments ON degree_programs.department_id = departments.department_id GROUP BY degree_programs.department_id ORDER BY COUNT( * ) DESC LIMIT 1	student_transcripts_tracking

SELECT * FROM degree_programs JOIN departments ON degree_programs.department_id = departments.department_id JOIN engineering ON departments.department_name = engineering	student_transcripts_tracking
SELECT COUNT( * ) FROM degree_programs JOIN departments ON degree_programs.department_id = departments.department_id JOIN engineering ON departments.department_name = engineering	student_transcripts_tracking

SELECT courses.course_name FROM courses JOIN sections ON courses.course_id = sections.course_id HAVING COUNT( * ) = 2 INTERSECT SELECT courses.course_name FROM courses JOIN sections ON courses.course_id = sections.course_id HAVING COUNT( * ) = 2	student_transcripts_tracking
SELECT courses.course_name , sections.course_id FROM courses JOIN sections ON courses.course_id = sections.course_id GROUP BY sections.course_id HAVING COUNT( * ) <= 2	student_transcripts_tracking

SELECT semesters.semester_name , semesters.semester_id FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_id ORDER BY COUNT( * ) ASC LIMIT 1	student_transcripts_tracking
SELECT semesters.semester_name , semesters.semester_id FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_id ORDER BY COUNT( * ) DESC LIMIT 1	student_transcripts_tracking

SELECT departments.department_name FROM departments WHERE departments.department_name<computer	student_transcripts_tracking
SELECT departments.department_description FROM addresses, departments, departments, departments WHERE departments.department_description = (SELECT transcripts.transcript_id FROM addresses)	student_transcripts_tracking

SELECT COUNT( * ) FROM student_enrolment WHERE student_enrolment.semester_id = 2 AND student_enrolment.semester_id = 2	student_transcripts_tracking
semesters , student_enrolment	student_transcripts_tracking

SELECT COUNT( * ) FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id JOIN Bachelor ON degree_programs.degree_summary_name = Bachelor	student_transcripts_tracking
SELECT students.first_name , students.middle_name , students.middle_name , students.last_name FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id JOIN students ON student_enrolment.student_id = students.student_id JOIN Bachelor ON degree_programs.degree_summary_name = Bachelor	student_transcripts_tracking

SELECT courses.course_description FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY student_enrolment.degree_program_id ORDER BY COUNT( * ) DESC LIMIT 3	student_transcripts_tracking
SELECT courses.course_name FROM courses JOIN student_enrolment ON courses.course_id = student_enrolment.degree_program_id GROUP BY student_enrolment.degree_program_id ORDER BY COUNT( * ) DESC LIMIT 1	student_transcripts_tracking

SELECT degree_programs.degree_summary_description FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_programs.degree_program_id ORDER BY COUNT( * ) ASC LIMIT 1	student_transcripts_tracking
SELECT degree_programs.degree_summary_description FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY student_enrolment.degree_program_id ORDER BY COUNT( * ) DESC LIMIT 1	student_transcripts_tracking
SELECT degree_programs.degree_program_id , degree_programs.degree_summary_description , degree_programs.degree_summary_description , degree_programs.degree_summary_name FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_programs.degree_program_id ORDER BY COUNT( * ) DESC LIMIT 1	student_transcripts_tracking

SELECT student_enrolment.student_id , students.first_name , students.last_name FROM student_enrolment JOIN students ON student_enrolment.student_id = students.student_id GROUP BY student_enrolment.student_id ORDER BY COUNT( * ) DESC LIMIT 3	student_transcripts_tracking
SELECT student_enrolment.student_id , students.first_name , students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY student_enrolment.student_id ORDER BY COUNT( * ) DESC LIMIT 1	student_transcripts_tracking

SELECT semesters.semester_description FROM semesters WHERE semesters.semester_id NOT IN (SELECT student_enrolment.semester_id FROM student_enrolment)	student_transcripts_tracking
SELECT semesters.semester_name FROM semesters WHERE semesters.semester_id NOT IN (SELECT student_enrolment.semester_id FROM student_enrolment)	student_transcripts_tracking

SELECT courses.course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id GROUP BY courses.course_name ORDER BY COUNT( * ) ASC LIMIT 1	student_transcripts_tracking
SELECT courses.course_name , COUNT( * ) FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id GROUP BY student_enrolment_courses.course_id ORDER BY COUNT( * ) DESC LIMIT 1	student_transcripts_tracking
SELECT courses.course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id GROUP BY student_enrolment_courses.course_id ORDER BY COUNT( * ) DESC LIMIT 1	student_transcripts_tracking

SELECT COUNT( * ) FROM students JOIN addresses ON students.current_address_id = addresses.address_id JOIN North Carolina ON addresses.state_province_county = North Carolina	student_transcripts_tracking
SELECT COUNT( * ) FROM students WHERE students.current_address_id NOT IN (SELECT student_enrolment.student_id FROM students JOIN addresses ON students.current_address_id = addresses.address_id JOIN North Carolina ON addresses.state_province_county = North Carolina)	student_transcripts_tracking
SELECT students.last_name FROM students WHERE students.last_name NOT IN (SELECT students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN addresses ON students.current_address_id = addresses.address_id JOIN North Carolina ON addresses.state_province_county = North Carolina)	student_transcripts_tracking

SELECT transcripts.transcript_date , courses.course_id FROM courses JOIN sections ON courses.course_id = sections.course_id GROUP BY courses.course_id HAVING COUNT( * ) = 2	student_transcripts_tracking
SELECT 2 FROM transcripts GROUP BY 2 HAVING COUNT( * ) >= 2	student_transcripts_tracking

SELECT addresses.line_1 , addresses.line_3 FROM addresses JOIN students ON addresses.address_id = students.current_address_id JOIN Timothy ON students.first_name = Timothy JOIN Ward ON students.last_name = Ward	student_transcripts_tracking
SELECT students.cell_mobile_number FROM students JOIN Timothy ON students.first_name = Timothy JOIN Ward ON students.last_name = Ward	student_transcripts_tracking

SELECT students.first_name , students.middle_name , students.middle_name , students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id ORDER BY students.date_first_registered DESC LIMIT 1	student_transcripts_tracking
SELECT students.date_first_registered , students.first_name , students.last_name , students.middle_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id ORDER BY students.date_first_registered DESC LIMIT 1	student_transcripts_tracking

SELECT students.first_name , students.middle_name , students.middle_name , students.last_name FROM students ORDER BY students.date_left DESC LIMIT 1	student_transcripts_tracking
SELECT students.first_name , MAX( students.other_student_details ) , students.middle_name FROM students ORDER BY students.last_name DESC LIMIT 1	student_transcripts_tracking

SELECT addresses.address_id FROM addresses JOIN students ON addresses.address_id = students.current_address_id GROUP BY addresses.address_id ORDER BY COUNT( * ) DESC LIMIT 1	student_transcripts_tracking
SELECT COUNT( * ) FROM addresses JOIN students ON addresses.address_id = students.current_address_id GROUP BY addresses.address_id ORDER BY COUNT( * ) DESC LIMIT 1	student_transcripts_tracking
SELECT addresses.line_1 , students.permanent_address_id , addresses.address_id FROM addresses JOIN students ON addresses.address_id = students.current_address_id GROUP BY addresses.address_id ORDER BY COUNT( * ) DESC LIMIT 1	student_transcripts_tracking

SELECT * FROM transcripts ORDER BY transcripts.transcript_date ASC LIMIT 1	student_transcripts_tracking
SELECT transcripts.transcript_date FROM transcripts ORDER BY transcripts.other_details ASC LIMIT 1	student_transcripts_tracking

SELECT transcripts.transcript_date FROM transcripts ORDER BY transcripts.transcript_date ASC LIMIT 1	student_transcripts_tracking
SELECT transcripts.transcript_date FROM transcripts ORDER BY transcripts.transcript_date ASC LIMIT 1	student_transcripts_tracking

SELECT student_enrolment_courses.course_id FROM student_enrolment_courses JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id GROUP BY student_enrolment_courses.course_id	student_transcripts_tracking
SELECT COUNT( DISTINCT student_enrolment_courses.course_id ) FROM student_enrolment_courses JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id GROUP BY student_enrolment_courses.course_id HAVING COUNT( * ) <= 1	student_transcripts_tracking

SELECT transcripts.other_details FROM transcripts GROUP BY transcripts.other_details ORDER BY COUNT( * ) ASC LIMIT 1	student_transcripts_tracking
SELECT transcripts.transcript_id , transcripts.other_details FROM courses JOIN sections ON courses.course_id = sections.course_id JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id GROUP BY transcripts.transcript_id ORDER BY COUNT( * ) ASC LIMIT 1	student_transcripts_tracking

SELECT semesters.semester_name FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id JOIN degree_programs ON degree_programs.degree_program_id = student_enrolment.degree_program_id JOIN Master ON degree_programs.degree_summary_name = Master	student_transcripts_tracking
SELECT semesters.semester_name FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id JOIN Bachelor ON student_enrolment.other_details = Bachelor	student_transcripts_tracking
SELECT semesters.semester_name FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id JOIN Master ON * = Master INTERSECT SELECT semesters.semester_name FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id JOIN Bachelor ON * = Bachelor	student_transcripts_tracking

SELECT * FROM owners	dog_kennels
SELECT * FROM professionals	dog_kennels
SELECT professionals.state FROM professionals	dog_kennels
SELECT owners.state FROM owners INTERSECT SELECT professionals.state FROM professionals	dog_kennels

SELECT dogs.age FROM dogs	dog_kennels
SELECT MAX( dogs.age ) , MIN( dogs.age ) FROM dogs	dog_kennels
SELECT MAX( dogs.age ) , MIN( dogs.age ) FROM treatments JOIN dogs ON treatments.dog_id = dogs.dog_id	dog_kennels
SELECT AVG( dogs.age ) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id	dog_kennels

SELECT * FROM professionals JOIN Employees ON professionals.last_name = Employees	dog_kennels
SELECT COUNT( * ) FROM professionals JOIN Connecticut ON professionals.state = Connecticut	dog_kennels
SELECT COUNT( * ) FROM professionals JOIN Indiana ON professionals.state = Indiana	dog_kennels
SELECT * FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id GROUP BY professionals.professional_id HAVING COUNT( * ) = 1	dog_kennels
SELECT professionals.professional_id , professionals.last_name , professionals.cell_number FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id HAVING COUNT( * ) > 2 INTERSECT SELECT professionals.professional_id , professionals.last_name , professionals.home_phone FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id HAVING COUNT( * ) > 2	dog_kennels

SELECT SUM( charges.charge_amount ) FROM treatments JOIN dogs ON treatments.dog_id = dogs.dog_id	dog_kennels
SELECT dogs.name FROM dogs GROUP BY dogs.name HAVING SUM( charges.charge_amount ) > 500	dog_kennels
SELECT dogs.name , SUM( charges.charge_amount ) FROM treatments JOIN dogs ON treatments.dog_id = dogs.dog_id GROUP BY dogs.name HAVING SUM( charges.charge_amount ) > 1000	dog_kennels

SELECT dogs.name FROM professionals INTERSECT SELECT dogs.name FROM owners	dog_kennels
SELECT owners.first_name , professionals.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE professionals.first_name > professionals.last_name	dog_kennels
NO PREDICTION

SELECT professionals.first_name , treatments.treatment_type_code FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id	dog_kennels
SELECT professionals.first_name , professionals.role_code , professionals.email_address , treatments.treatment_type_code FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id	dog_kennels
SELECT professionals.first_name , professionals.role_code , professionals.email_address FROM professionals EXCEPT SELECT professionals.first_name , professionals.role_code , professionals.email_address FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id	dog_kennels

SELECT dogs.owner_id , COUNT( * ) FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY dogs.owner_id	dog_kennels
SELECT * FROM dogs GROUP BY dogs.owner_id HAVING COUNT( * ) = 2	dog_kennels
SELECT owners.first_name , owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id ORDER BY COUNT( * ) DESC LIMIT 1	dog_kennels

SELECT COUNT( * ) , professionals.professional_id FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id GROUP BY professionals.professional_id	dog_kennels
SELECT professionals.first_name FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id GROUP BY professionals.professional_id HAVING COUNT( * ) = 1	dog_kennels
SELECT professionals.first_name FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id GROUP BY professionals.professional_id HAVING COUNT( * ) >= 2	dog_kennels
SELECT professionals.professional_id , professionals.role_code , professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id GROUP BY professionals.professional_id , professionals.role_code , professionals.first_name HAVING COUNT( * ) >= 2	dog_kennels

SELECT dogs.breed_code , COUNT( * ) FROM dogs GROUP BY dogs.breed_code	dog_kennels
SELECT dogs.breed_code FROM dogs GROUP BY dogs.breed_code ORDER BY COUNT( * ) DESC LIMIT 2	dog_kennels
SELECT dogs.breed_code FROM dogs GROUP BY dogs.breed_code ORDER BY COUNT( * ) DESC LIMIT 1	dog_kennels
SELECT breeds.breed_name FROM breeds JOIN dogs ON breeds.breed_code = dogs.breed_code GROUP BY dogs.breed_code ORDER BY COUNT( * ) DESC LIMIT 1	dog_kennels

SELECT SUM( charges.charge_amount ) FROM treatments JOIN dogs ON treatments.dog_id = dogs.dog_id	dog_kennels
SELECT owners.first_name , owners.last_name , charges.charge_amount FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id	dog_kennels
SELECT dogs.owner_id , owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id ORDER BY COUNT( * ) DESC LIMIT 1	dog_kennels

SELECT treatment_types.treatment_type_code , treatment_types.treatment_type_description FROM treatment_types	dog_kennels
SELECT treatments.treatment_type_code , treatment_types.treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code GROUP BY treatments.treatment_type_code ORDER BY SUM( treatments.cost_of_treatment ) DESC	dog_kennels
SELECT treatments.treatment_type_code , treatment_types.treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code GROUP BY treatments.treatment_type_code ORDER BY SUM( treatments.cost_of_treatment ) DESC	dog_kennels
SELECT treatments.treatment_type_code , treatment_types.treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code GROUP BY treatments.treatment_type_code ORDER BY SUM( treatments.cost_of_treatment ) ASC LIMIT 1	dog_kennels

SELECT SUM( charges.charge_amount ) FROM treatments JOIN dogs ON treatments.dog_id = dogs.dog_id	dog_kennels
SELECT COUNT( * ) FROM charges JOIN dogs ON charges.charge_id = dogs.dog_id WHERE charges.charge_amount > 700	dog_kennels
charges , charges	dog_kennels
SELECT dogs.owner_id , owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id ORDER BY SUM( charges.charge_amount ) DESC HAVING SUM( charges.charge_amount ) > 400	dog_kennels

SELECT professionals.first_name , treatments.treatment_type_code FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code	dog_kennels
SELECT professionals.first_name , treatments.treatment_type_code , COUNT( * ) FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id GROUP BY professionals.professional_id	dog_kennels
SELECT professionals.first_name , professionals.cell_number , COUNT( * ) FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id GROUP BY professionals.first_name , professionals.cell_number HAVING COUNT( * ) = 1	dog_kennels
SELECT professionals.first_name , professionals.cell_number , COUNT( * ) FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code GROUP BY treatments.professional_id HAVING COUNT( * ) >= 2	dog_kennels

charges , treatments	dog_kennels
SELECT professionals.first_name , professionals.last_name FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id ORDER BY treatments.cost_of_treatment ASC	dog_kennels
SELECT AVG( treatments.cost_of_treatment ) , MAX( treatments.cost_of_treatment ) FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id	dog_kennels
SELECT professionals.first_name , professionals.last_name FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE treatments.cost_of_treatment<(SELECT AVG( treatments.cost_of_treatment ) FROM treatments)	dog_kennels

SELECT dogs.breed_code , COUNT( * ) FROM dogs GROUP BY dogs.breed_code	dog_kennels
SELECT dogs.breed_code FROM dogs GROUP BY dogs.breed_code ORDER BY COUNT( * ) DESC LIMIT 1	dog_kennels
SELECT dogs.breed_code FROM dogs GROUP BY dogs.breed_code ORDER BY COUNT( * ) ASC LIMIT 1	dog_kennels
SELECT treatments.date_of_treatment , dogs.breed_code FROM breeds JOIN dogs ON breeds.breed_code = dogs.breed_code JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY dogs.breed_code ORDER BY COUNT( * ) ASC LIMIT 1	dog_kennels

SELECT dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN Lake Tia ON owners.city = Lake Tia	dog_kennels
SELECT dogs.name , owners.first_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN Lake Tia ON owners.city = Lake Tia	dog_kennels
SELECT dogs.name , owners.first_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN Virginia ON owners.state = Virginia	dog_kennels

SELECT * FROM dogs ORDER BY dogs.age DESC LIMIT 1	dog_kennels
SELECT owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id ORDER BY dogs.age DESC LIMIT 1	dog_kennels
SELECT owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id ORDER BY dogs.age ASC LIMIT 1	dog_kennels

SELECT professionals.city , professionals.state FROM professionals	dog_kennels
SELECT COUNT( * ) FROM professionals JOIN Hawaii ON professionals.state = Hawaii	dog_kennels
SELECT professionals.email_address FROM professionals WHERE professionals.state = Hawaii OR professionals.state = Wisconsin	dog_kennels

SELECT professionals.state FROM professionals	dog_kennels
SELECT COUNT( * ) FROM professionals JOIN Wisconsin ON professionals.state = Wisconsin	dog_kennels
SELECT professionals.role_code , COUNT( * ) , professionals.street , professionals.city , professionals.state FROM professionals GROUP BY professionals.state	dog_kennels
SELECT professionals.city , professionals.street , professionals.state FROM professionals WHERE professionals.role_code > professionals.street OR professionals.city = West	dog_kennels

SELECT owners.state FROM owners	dog_kennels
SELECT COUNT( * ) FROM owners JOIN Vermont ON owners.state = Vermont	dog_kennels
SELECT owners.first_name , owners.last_name , owners.email_address FROM owners JOIN North ON owners.last_name = North WHERE owners.first_name >= owners.last_name GROUP BY owners.email_address	dog_kennels

SELECT * FROM dogs ORDER BY dogs.age DESC	dog_kennels
SELECT COUNT( * ) FROM dogs WHERE dogs.age <= 4	dog_kennels
SELECT COUNT( * ) FROM dogs WHERE dogs.age<(SELECT AVG( dogs.age ) FROM dogs WHERE dogs.age<4)	dog_kennels

SELECT * FROM treatments	dog_kennels
SELECT treatments.cost_of_treatment FROM treatments ORDER BY treatments.cost_of_treatment ASC	dog_kennels
SELECT treatments.cost_of_treatment FROM treatments ORDER BY treatments.cost_of_treatment DESC	dog_kennels
SELECT treatments.cost_of_treatment FROM treatments ORDER BY treatments.cost_of_treatment DESC LIMIT 1	dog_kennels

SELECT * FROM owners	dog_kennels
SELECT * FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id	dog_kennels
SELECT COUNT( * ) FROM treatments JOIN dogs ON treatments.dog_id = dogs.dog_id JOIN dogs ON dogs.owner_id = dogs.dog_id	dog_kennels
SELECT COUNT( * ) FROM owners WHERE owners.owner_id NOT IN (SELECT treatments.dog_id FROM treatments)	dog_kennels

SELECT * FROM owners	dog_kennels
SELECT COUNT( * ) FROM owners JOIN Arizona ON owners.state = Arizona	dog_kennels
SELECT COUNT( * ) FROM owners WHERE owners.owner_id NOT IN (SELECT dogs.owner_id FROM owners JOIN Arizona ON owners.state = Arizona)	dog_kennels

SELECT COUNT( * ) FROM professionals	dog_kennels
SELECT COUNT( * ) FROM professionals JOIN West Heidi ON professionals.city = West Heidi	dog_kennels
SELECT COUNT( * ) FROM professionals WHERE professionals.professional_id NOT IN (SELECT professionals.professional_id FROM professionals JOIN West Heidi ON professionals.city = West Heidi)	dog_kennels
